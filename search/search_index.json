{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"exoatlas","text":"<p>The <code>exoatlas</code> package is a set of tools for interacting with exoplanet populations. It contains a friendly way to download useful data from online archives like the NASA Exoplanet Archive and JPL Solar System Dynamics, tools for easy access planet properties, and some pre-packaged visualizations for summarizing and comparing different populations.</p>"},{"location":"acknowledgements/","title":"Acknowledgements","text":""},{"location":"acknowledgements/#acknowledgements","title":"Acknowledgements\u00b6","text":"<p>We gratefully acknowledge the effort and financial support that have gone into this open-source code tool.</p>"},{"location":"acknowledgements/#authors","title":"Authors\u00b6","text":"<p>This package results from the generous collaborative efforts of scientists all over the world. The list of of contributors on GitHub is the most up-to-date reference of who has helped.</p>"},{"location":"acknowledgements/#data","title":"Data\u00b6","text":"<p>The data underlying <code>exoatlas</code> comes from the hugely important and generous efforts of two main archives.</p> <ul> <li><p>NASA Exoplanet Archive provides exoplanet data for <code>Exoplanets</code>, <code>TransitingExoplaets</code>, and other related populations. If you use these populations, you can use the AAS facility keyword <code>\\facility{Exoplanet Archive}</code> and include the statement in your acknowledgements: This research has made use of the NASA Exoplanet Archive, which is operated by the California Institute of Technology, under contract with the National Aeronautics and Space Administration under the Exoplanet Exploration Program.</p> </li> <li><p>NASA/JPL Solar System Dynamics provides most of the Solar System data for <code>SolarSystem</code>, <code>SolarSystemDwarfPlanets</code>, <code>SolarSystemMinorPlanets</code>, <code>SolarSystemMoons</code>, and other related populations. If you use these populations, you should please include the following citation: Solar System Dynamics. (Downloaded Year, Month, Date). (Title of the Page). https://ssd.jpl.nasa.gov</p> </li> </ul>"},{"location":"acknowledgements/#funding","title":"Funding\u00b6","text":"<p>This material is based upon work supported by the National Science Foundation under Grant Number 1945633.</p> <p>Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.</p>"},{"location":"compare-nasa-exoplanet-archive-tables/","title":"Exporing the NASA Exoplanet Archive Tables","text":"In\u00a0[1]: Copied! <pre>from exoatlas import * \nexplorer = NASAExoplanetArchiveComparison()\n</pre> from exoatlas import *  explorer = NASAExoplanetArchiveComparison() <pre>Loading local file from /Users/zabe0091/exoatlas-data/data/nasa-exoplanet-archive-from+pscomppars.txt\n</pre> <pre>Loading local file from /Users/zabe0091/exoatlas-data/data/nasa-exoplanet-archive-from+ps.txt\n</pre> In\u00a0[2]: Copied! <pre>explorer.do_units_check()\n</pre> explorer.do_units_check() <pre>\n                    The parameter 'rad' is off by more than 5.000000% for the 0 planets \n                    pl_name\n-------\n                    simply because of weird rounding and/or Earth-Jupiter unit conversions.\n                    \n[]\n</pre> <pre>\n                    The parameter 'bmass' is off by more than 5.000000% for the 10 planets \n                            pl_name        \n-----------------------\n           Kepler-101 c\n              HR 8799 d\n              HR 8799 c\n              HR 8799 b\n             GJ 667 C f\n             GJ 667 C e\n            Kepler-62 b\n           Kepler-406 c\n            Kepler-51 b\n1RXS J160929.1-210524 b\n                    simply because of weird rounding and/or Earth-Jupiter unit conversions.\n                    \n[np.str_('Kepler-101 c'), np.str_('HR 8799 d'), np.str_('HR 8799 c'), np.str_('HR 8799 b'), np.str_('GJ 667 C f'), np.str_('GJ 667 C e'), np.str_('Kepler-62 b'), np.str_('Kepler-406 c'), np.str_('Kepler-51 b'), np.str_('1RXS J160929.1-210524 b')]\n</pre> In\u00a0[3]: Copied! <pre>explorer.do_mass_radius_check()\n</pre> explorer.do_mass_radius_check() In\u00a0[4]: Copied! <pre>explorer.do_luminosity_check()\n</pre> explorer.do_luminosity_check() In\u00a0[5]: Copied! <pre>explorer.do_completeness_check()\n</pre> explorer.do_completeness_check() <pre>/Users/zabe0091/Dropbox/zach/code/exoatlas/exoatlas/populations/exoplanets/exoplanet_archive_comparisons.py:95: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.\n  fi, ax = plt.subplots(\n</pre>"},{"location":"compare-nasa-exoplanet-archive-tables/#exporing-the-nasa-exoplanet-archive-tables","title":"Exporing the NASA Exoplanet Archive Tables\u00b6","text":"<p>The NASA Exoplanet Archive thoughtfully and painstakingly describes the data columns it contains, as well as how they merge the bazillions of different measurements from different references.</p> <p>Here, we explore some visualizations of how the Planetary Systems (one row per reference) and Planetary Systems Composite (one row per planet) tables compare to one another, and how the data within those tables fits together. The plots here are designed mostly to help with weird nitty gritty internal decision making for the <code>exoatlas</code>. These plots are made with love and should not be seen as criticisms of the NASA Exoplanet Archive; the fine folks there do a herculean task to wrangle data from thousands of different papers.</p> <p>We include these in the documentation because it's useful to see these plots generated regularly as the Exoplanet Archive grows, but we hide it away at the end because we don't explain things particularly well (yet?).</p>"},{"location":"compare-nasa-exoplanet-archive-tables/#are-there-weird-unit-problems","title":"Are there weird unit problems?\u00b6","text":"<p>Weirdly, for some planets we'll get different answers whether we ingest the planet quantities like mass and radius in Earth units or in Jupiter units. This might be caused by units and/or rounding errors in the papers that got ingested into the archive. It's probably good to be aware of!</p>"},{"location":"compare-nasa-exoplanet-archive-tables/#do-masses-and-radii-make-sense","title":"Do masses and radii make sense?\u00b6","text":"<p>In the Planetary Systems Composite Parameters table, the archive calculates mass and radius estimates for planets that don't have measurements from an empirical mass-radius relationship. An easy way to remove those theoretical estimates, is to eliminate values that don't have finite uncertainties associated with them. All measurements should have uncertainties! I believe this cut also removes some upper/lower limits (but don't quote me on that, yet).</p>"},{"location":"compare-nasa-exoplanet-archive-tables/#are-stellar-luminosities-radii-and-effective-temperatures-consistent","title":"Are stellar luminosities, radii, and effective temperatures consistent?\u00b6","text":"<p>By definition, it should be the case that for all stars the luminosity $L$ is exactly linked to its radius $R$ and effective temperature $T_{eff}$ as $$L = 4\\pi R^2 \\sigma T_{eff}^4$$ Is that true? No! Fascinatingly, there are a bunch of stars (mostly in the <code>ps</code> tables) that have $log_{10}(L/L_\\odot)$ listed as exactly 1, regardless of reasonable radii and effective temperatures defined. Fortunately, most of those disappear when we filter out values that don't have uncertainties associated with them (= likely values from the TESS or Kepler input catalogs, one might wonder?).</p> <p>However, there are lots of stars that apparently have measurements (= existing uncertainties) of all three of $L, R, T_{eff}$ but yet have inconsistencies that amount to a factor of 2 in the inferred luminosity. It might be worth digging in a little more to see what sorts of systems they are and if there's anything we can do to improve the situation. In the meantime, we should probably be a smidge wary of exact stellar parameters!</p>"},{"location":"compare-nasa-exoplanet-archive-tables/#whats-in-which-table","title":"What's in which table?\u00b6","text":"<p>First, let's take a few parameters to see how the contents of the Planetary Systems Composite Parameters table to the complete contents of the Planetary Systems table from which it is derived. Entirely (and foolishly) negelecting uncertainties on values and which values are limits, let's make some plots indicating the complete set of values that appear in <code>ps</code> for each planet + parameter in <code>pscomppars</code>.</p>"},{"location":"compare-nasa-exoplanet-archive-tables/#how-do-we-safely-use-transit-periods-midpoints-durations","title":"How do we safely use transit periods, midpoints, durations?\u00b6","text":"<p>For planning future transit observations, we need to use a transit period, transit mid-point, and transit duration. If those three values come from different sources, it might potentially mess things up; it'd be good to check (a) how often if at all they come from the same reference, (b) what problems might emerge for prediciting transit events at the present day. Ideally, it would also be the case that (except maybe for extremely grazing transits) the quoted duration should be consistent with that calculated from the stellar and planetary properties; how often are transit durations actually quoted and how often are they right?</p> <p>For eclipses, we also need eccentricity and argument of periastron, it'd be lovely to extend these tests to eclipse timing too, but might require some more careful error propagation than we want to do here with the raw tables.</p>"},{"location":"creating/","title":"Creating","text":"In\u00a0[1]: Copied! <pre>import exoatlas as ea\nimport exoatlas.visualizations as vi\nimport astropy.units as u \n\nea.version()\n</pre> import exoatlas as ea import exoatlas.visualizations as vi import astropy.units as u   ea.version() Out[1]: <pre>'0.6.1'</pre> <p>Throughout this page we'll use a handy <code>PlanetGallery()</code> gallery visualization to see some basic properties of a particular population. For more on useful plots and plotting tools, see Visualizing.</p> In\u00a0[2]: Copied! <pre>ea.locate_local_data()\n</pre> ea.locate_local_data() <pre>\ud83d\udcbe `exoatlas` archive data will be stored in:\n/Users/zabe0091/exoatlas-data\n</pre> <p>By default, downloaded data will be stored inside your current working directory. If you'll be using <code>exoatlas</code> from lots of different directories on your computer, and you don't want to keep downloading fresh copies of the archive into each working directory, you can define one path that should be used for <code>exoatlas</code> data for your entire computer by setting a global <code>EXOATLAS_DATA</code> environment. For example, on a mid-2020s Mac, this looks like editing the shell configuration file <code>~/.zshrc</code> and adding a line like <code>export EXOATLAS_DATA=\"/Users/zabe0091/exoatlas-data\"</code>.</p> <p>If you ever want to reset the local data, you do so with:</p> <ul> <li><code>ea.reset_local_data()</code> to remove all local files, including raw downloads</li> <li><code>ea.reset_standardized_data()</code> to remove standardized files but keep raw downloads</li> </ul> <p>If you have recently updated your local version of <code>exoatlas</code> and run into problems with data acting weird, you may want to consider doing a data reset.</p> In\u00a0[3]: Copied! <pre>solar = ea.SolarSystem()\nsolar\n</pre> solar = ea.SolarSystem() solar Out[3]: <pre>\u2728 Solar System | 8 elements \u2728</pre> In\u00a0[4]: Copied! <pre>vi.PlanetGallery().build(solar);\n</pre> vi.PlanetGallery().build(solar); <p>Likewise, we have the dwarf planets, smaller minor planets, and moons:</p> In\u00a0[5]: Copied! <pre>dwarfs = ea.SolarSystemDwarfPlanets()\ndwarfs\n</pre> dwarfs = ea.SolarSystemDwarfPlanets() dwarfs Out[5]: <pre>\u2728 Solar System Dwarf Planets | 5 elements \u2728</pre> In\u00a0[6]: Copied! <pre>minor = ea.SolarSystemMinorPlanets()\nminor\n</pre> minor = ea.SolarSystemMinorPlanets() minor Out[6]: <pre>\u2728 Solar System Minor Planets | 10183 elements \u2728</pre> In\u00a0[7]: Copied! <pre>moons = ea.SolarSystemMoons()\nmoons\n</pre> moons = ea.SolarSystemMoons() moons Out[7]: <pre>\u2728 Solar System Moons | 41 elements \u2728</pre> In\u00a0[8]: Copied! <pre>exoplanets = ea.Exoplanets()\nexoplanets\n</pre> exoplanets = ea.Exoplanets() exoplanets Out[8]: <pre>\u2728 Exoplanets | 5862 elements \u2728</pre> <p>For many purposes, it will be really handy to have just those exoplanets that transit their stars. To access those:</p> In\u00a0[9]: Copied! <pre>transiting = ea.TransitingExoplanets()\ntransiting\n</pre> transiting = ea.TransitingExoplanets() transiting Out[9]: <pre>\u2728 Transiting Exoplanets | 4406 elements \u2728</pre> In\u00a0[10]: Copied! <pre>vi.PlanetGallery().build([transiting, solar]);\n</pre> vi.PlanetGallery().build([transiting, solar]); <p>Which planets were discovered by the NASA Kepler mission or not?</p> In\u00a0[11]: Copied! <pre>kepler = ea.Kepler()\nkepler\n</pre> kepler = ea.Kepler() kepler Out[11]: <pre>\u2728 Kepler | 3305 elements \u2728</pre> In\u00a0[12]: Copied! <pre>nonkepler = ea.NonKepler()\nnonkepler\n</pre> nonkepler = ea.NonKepler() nonkepler Out[12]: <pre>\u2728 Non-Kepler | 1101 elements \u2728</pre> In\u00a0[13]: Copied! <pre>vi.PlanetGallery().build([kepler, nonkepler, solar]);\n</pre> vi.PlanetGallery().build([kepler, nonkepler, solar]); <p>Which planets were discovered by the NASA TESS mission or not?</p> In\u00a0[14]: Copied! <pre>tess = ea.TESS()\ntess\n</pre> tess = ea.TESS() tess Out[14]: <pre>\u2728 TESS | 616 elements \u2728</pre> In\u00a0[15]: Copied! <pre>nontess = ea.NonTESS()\nnontess\n</pre> nontess = ea.NonTESS() nontess Out[15]: <pre>\u2728 NonTESS | 3790 elements \u2728</pre> In\u00a0[16]: Copied! <pre>vi.PlanetGallery().build([nontess, tess, solar]);\n</pre> vi.PlanetGallery().build([nontess, tess, solar]); <p>Which planets were discovered from telescopes in space or telescopes on the ground?</p> In\u00a0[17]: Copied! <pre>space = ea.Space()\nspace\n</pre> space = ea.Space() space Out[17]: <pre>\u2728 Space-based | 3957 elements \u2728</pre> In\u00a0[18]: Copied! <pre>ground = ea.Ground()\nground\n</pre> ground = ea.Ground() ground Out[18]: <pre>\u2728 Ground-based | 449 elements \u2728</pre> In\u00a0[19]: Copied! <pre>vi.PlanetGallery().build([space, ground, solar]);\n</pre> vi.PlanetGallery().build([space, ground, solar]); In\u00a0[20]: Copied! <pre>good = ea.GoodMass(sigma=5)\ngood\n</pre> good = ea.GoodMass(sigma=5) good Out[20]: <pre>\u2728 Good Mass | 871 elements \u2728</pre> In\u00a0[21]: Copied! <pre>bad = ea.BadMass(sigma=5)\nbad\n</pre> bad = ea.BadMass(sigma=5) bad Out[21]: <pre>\u2728 Bad Mass | 3535 elements \u2728</pre> In\u00a0[22]: Copied! <pre>vi.PlanetGallery().build([bad, good]);\n</pre> vi.PlanetGallery().build([bad, good]); In\u00a0[23]: Copied! <pre>methods = ea.get_exoplanets_by_method()\nmethods\n</pre> methods = ea.get_exoplanets_by_method() methods Out[23]: <pre>{np.str_('Astrometry'): \u2728 Astrometry | 5 elements \u2728,\n np.str_('Disk Kinematics'): \u2728 Disk Kinematics | 1 elements \u2728,\n np.str_('Eclipse Timing Variations'): \u2728 Eclipse Timing Variations | 17 elements \u2728,\n np.str_('Imaging'): \u2728 Imaging | 82 elements \u2728,\n np.str_('Microlensing'): \u2728 Microlensing | 235 elements \u2728,\n np.str_('Orbital Brightness Modulation'): \u2728 Orbital Brightness Modulation | 9 elements \u2728,\n np.str_('Pulsar Timing'): \u2728 Pulsar Timing | 8 elements \u2728,\n np.str_('Pulsation Timing Variations'): \u2728 Pulsation Timing Variations | 2 elements \u2728,\n np.str_('Radial Velocity'): \u2728 Radial Velocity | 1112 elements \u2728,\n np.str_('Transit'): \u2728 Transit | 4357 elements \u2728,\n np.str_('Transit Timing Variations'): \u2728 Transit Timing Variations | 34 elements \u2728,\n 'Solar System': \u2728 Solar System | 8 elements \u2728}</pre> In\u00a0[24]: Copied! <pre>vi.PlanetGallery().build(methods);\n</pre> vi.PlanetGallery().build(methods); In\u00a0[25]: Copied! <pre>teffs = ea.get_exoplanets_by_teff()\nteffs\n</pre> teffs = ea.get_exoplanets_by_teff() teffs Out[25]: <pre>{'O': \u2728 O | 2 elements \u2728,\n 'B': \u2728 B | 11 elements \u2728,\n 'A': \u2728 A | 28 elements \u2728,\n 'F': \u2728 F | 1116 elements \u2728,\n 'G': \u2728 G | 2119 elements \u2728,\n 'K': \u2728 K | 1629 elements \u2728,\n 'M': \u2728 M | 482 elements \u2728,\n 'T': \u2728 T | 2 elements \u2728,\n 'Y': \u2728 Y | 1 elements \u2728}</pre> In\u00a0[26]: Copied! <pre>vi.PlanetGallery().build(teffs);\n</pre> vi.PlanetGallery().build(teffs); <p>All of these populations assume the values quoted in the archive are correct. If you need to update values, or choose values from different references, please see Curating. If you're confident your population is good enough for your needs, you can skip along ahead!</p>"},{"location":"creating/#creating","title":"Creating\u00b6","text":"<p>The primary goal of <code>exoatlas</code> is to create populations of exoplanets which which we can interact in fairly standardized way. Here we summarize a few different pre-defined <code>Population</code> objects we can create. From all these basic populations, you can make your own to play with by indexing, slicing, or masking as described in Populations.</p>"},{"location":"creating/#predefinedpopulation-commonly-useful-archival-datasets","title":"<code>PredefinedPopulation</code> = commonly useful archival datasets\u00b6","text":"<p>The atlas contains a few predefined populations, for which data are automatically downloaded from archives and standardized into tables in <code>exoatlas</code>'s preferred format. This downloading and standardizing can take a while, so the results will be stored locally, in a directory you can locate with:</p>"},{"location":"creating/#solarsystem-major-solar-system-planets","title":"<code>SolarSystem</code> = major Solar System planets\u00b6","text":"<p>The eight planets in our own Solar System are useful as a comparison sample. Their properties are built-in with <code>exoatlas</code>, so they don't need to be downloaded from any archive.</p>"},{"location":"creating/#exoplanets-confirmed-published-exoplanets","title":"<code>Exoplanets</code> = confirmed, published, exoplanets\u00b6","text":"<p>The NASA Exoplanet Archive maintains a list of confirmed transiting exoplanets. These are systems that have been published in the peer-reviewed literature. Most of them have been characterized in sufficient detail that they are unlikely to be false positives. This archive contains planets discovered through a variety of methods. We can access all exoplanets in the archive, regardless of discovery method, with:</p>"},{"location":"creating/#subsets","title":"Subsets\u00b6","text":"<p>Some common subsets have been defined as their own <code>Population</code> objects. To make your own subsets, see Populations for how to filter a sample of planets down according to its properties.</p>"},{"location":"creating/#good-vs-bad-mass","title":"Good vs Bad Mass?\u00b6","text":"<p>Which planets have masses that have been detected at better than $5\\sigma$?</p>"},{"location":"creating/#collections","title":"Collections\u00b6","text":"<p>Because we often might want to load up a bunch of population subsets at once, we provide built-in functions that create dictionaries of planets grouped by particular properties. For example, let's see exoplanets grouped by their original discovery method:</p>"},{"location":"curating/","title":"Curating","text":"In\u00a0[1]: Copied! <pre>import exoatlas as ea\nea.version()\n</pre> import exoatlas as ea ea.version() Out[1]: <pre>'0.6.1'</pre> In\u00a0[2]: Copied! <pre>e = ea.Exoplanets()\ne\n</pre> e = ea.Exoplanets() e Out[2]: <pre>\u2728 Exoplanets | 5862 elements \u2728</pre> <p>If we want to see all individual references for each planet, which is a much larger table containing many more rows than there are planets, we'll need to load a <code>.individual_references</code> population. It might take a while.</p> In\u00a0[3]: Copied! <pre>e.load_individual_references()\n</pre> e.load_individual_references() <pre>(loading individual references may take up to a few minutes)\n</pre> Out[3]: <pre>\u2728 Individual References | 38170 elements \u2728</pre> <p>Once that's loaded, there's a secret sneaky internal population that we can access through the <code>.individual_references</code> attribute, containing every reference for every planet in the archive.</p> In\u00a0[4]: Copied! <pre>e.individual_references\n</pre> e.individual_references Out[4]: <pre>\u2728 Individual References | 38170 elements \u2728</pre> <p>Now, let's say we want to update what reference is being used to provide the <code>period</code> (and related) values for a particular planet. First, we can check what the options are with <code>.display_individual_references</code>.</p> In\u00a0[5]: Copied! <pre>e.display_individual_references(planets='HD189733b', keys='period')\n</pre> e.display_individual_references(planets='HD189733b', keys='period') Out[5]: QTable length=22 is_being_usednameperiod_referenceperiodperiod_uncertainty_lowerperiod_uncertainty_upperperiod_lower_limitperiod_upper_limit ddd str2str29str44float64float64float64float64float64 \ud83d\uddfa\ufe0fHD 189733 bStassun et al. 20172.21857567-1.5e-071.5e-07nannan \ud83c\udff7\ufe0fHD 189733 bExoFOP-TESS TOI2.2185748-1.8e-071.8e-07nannan \ud83c\udff7\ufe0fHD 189733 bSing et al. 2016nannannannannan \ud83c\udff7\ufe0fHD 189733 bSalz et al. 2015nannannannannan \ud83c\udff7\ufe0fHD 189733 bBouchy et al. 20052.219-0.00050.0005nannan \ud83c\udff7\ufe0fHD 189733 bAddison et al. 20192.218577-1e-059e-06nannan \ud83c\udff7\ufe0fHD 189733 bBaluev et al. 20152.2185752-8e-088e-08nannan \ud83c\udff7\ufe0fHD 189733 bKokori et al. 20222.21857519-1.4e-071.4e-07nannan \ud83c\udff7\ufe0fHD 189733 bMorello et al. 2014nannannannannan ........................ \ud83c\udff7\ufe0fHD 189733 bParedes et al. 20212.218-0.00090.001nannan \ud83c\udff7\ufe0fHD 189733 bIvshina + Winn 20222.21857514-6e-086e-08nannan \ud83c\udff7\ufe0fHD 189733 bDi Gloria et al. 2015nannannannannan \ud83c\udff7\ufe0fHD 189733 bAgol et al. 20102.21857567-1.5e-071.5e-07nannan \ud83c\udff7\ufe0fHD 189733 bTorres et al. 2008nannannannannan \ud83c\udff7\ufe0fHD 189733 bCegla et al. 20162.21857567-1.5e-071.5e-07nannan \ud83c\udff7\ufe0fHD 189733 bBarstow et al. 2017nannannannannan \ud83c\udff7\ufe0fHD 189733 bBoyajian et al. 2015nannannannannan \ud83c\udff7\ufe0fHD 189733 bStassun et al. 20172.21857567-1.5e-071.5e-07nannan <p>Then, we can update the population to use one of those options instead of the default.</p> In\u00a0[6]: Copied! <pre>e.update_reference(planets='HD189733b', references='Ivshina + Winn 2022')\n</pre> e.update_reference(planets='HD189733b', references='Ivshina + Winn 2022') <p>Finally, we can confirm that our change took effect, by checking the references again.</p> In\u00a0[7]: Copied! <pre>e.display_individual_references(planets='HD189733b', keys='period')\n</pre> e.display_individual_references(planets='HD189733b', keys='period') Out[7]: QTable length=22 is_being_usednameperiod_referenceperiodperiod_uncertainty_lowerperiod_uncertainty_upperperiod_lower_limitperiod_upper_limit ddd str2str29str44float64float64float64float64float64 \ud83d\uddfa\ufe0fHD 189733 bIvshina + Winn 20222.21857514-6e-086e-08nannan \ud83c\udff7\ufe0fHD 189733 bExoFOP-TESS TOI2.2185748-1.8e-071.8e-07nannan \ud83c\udff7\ufe0fHD 189733 bSing et al. 2016nannannannannan \ud83c\udff7\ufe0fHD 189733 bSalz et al. 2015nannannannannan \ud83c\udff7\ufe0fHD 189733 bBouchy et al. 20052.219-0.00050.0005nannan \ud83c\udff7\ufe0fHD 189733 bAddison et al. 20192.218577-1e-059e-06nannan \ud83c\udff7\ufe0fHD 189733 bBaluev et al. 20152.2185752-8e-088e-08nannan \ud83c\udff7\ufe0fHD 189733 bKokori et al. 20222.21857519-1.4e-071.4e-07nannan \ud83c\udff7\ufe0fHD 189733 bMorello et al. 2014nannannannannan ........................ \ud83c\udff7\ufe0fHD 189733 bParedes et al. 20212.218-0.00090.001nannan \ud83c\udff7\ufe0fHD 189733 bIvshina + Winn 20222.21857514-6e-086e-08nannan \ud83c\udff7\ufe0fHD 189733 bDi Gloria et al. 2015nannannannannan \ud83c\udff7\ufe0fHD 189733 bAgol et al. 20102.21857567-1.5e-071.5e-07nannan \ud83c\udff7\ufe0fHD 189733 bTorres et al. 2008nannannannannan \ud83c\udff7\ufe0fHD 189733 bCegla et al. 20162.21857567-1.5e-071.5e-07nannan \ud83c\udff7\ufe0fHD 189733 bBarstow et al. 2017nannannannannan \ud83c\udff7\ufe0fHD 189733 bBoyajian et al. 2015nannannannannan \ud83c\udff7\ufe0fHD 189733 bStassun et al. 20172.21857567-1.5e-071.5e-07nannan In\u00a0[8]: Copied! <pre>import astropy.units as u \ne.update_values(planets='HD189733b', radius=1*u.R_jupiter, radius_uncertainty=0.1*u.R_jupiter)\n</pre> import astropy.units as u  e.update_values(planets='HD189733b', radius=1*u.R_jupiter, radius_uncertainty=0.1*u.R_jupiter) <pre>['hd189733b'] | radius: 12.666 earthRad &gt; 1.0 jupiterRad\n['hd189733b'] | radius_uncertainty_lower: -0.112 earthRad &gt; -0.1 jupiterRad\n['hd189733b'] | radius_uncertainty_upper: 0.112 earthRad &gt; 0.1 jupiterRad\n</pre> In\u00a0[9]: Copied! <pre>e['HD189733'].radius\n</pre> e['HD189733'].radius Out[9]: <pre>&lt;function exoatlas.populations.population_core.Population._create_function_to_access_table_quantity.&lt;locals&gt;.f(distribution=False, **kw)&gt;</pre> In\u00a0[10]: Copied! <pre>import exoatlas as ea\n</pre> import exoatlas as ea In\u00a0[11]: Copied! <pre>def curate_population(x):\n    '''\n    Curate the values in an exoplanet population by \n    making small changes to the values being used.\n\n    Parameters \n    ---------- \n    x : exoatlas.populations.Exoplanets\n        An exoplanet population that needs to be curated. \n\n    Returns\n    -------\n    Nothing, but the population `x` has been modified \n    in place with updated values and/or reference choices. \n    '''\n\n    # (down)load the individual references\n    x.load_individual_references()\n\n    # update the reference for a planet's period/epoch\n    x.update_reference(planets='HD189733b', references='Ivshina + Winn 2022')\n\n    # update another value \n    x.update_values(planets='HD189733b', radius=1*u.R_jupiter, radius_uncertainty=0.1*u.R_jupiter)  \n</pre> def curate_population(x):     '''     Curate the values in an exoplanet population by      making small changes to the values being used.      Parameters      ----------      x : exoatlas.populations.Exoplanets         An exoplanet population that needs to be curated.       Returns     -------     Nothing, but the population `x` has been modified      in place with updated values and/or reference choices.      '''      # (down)load the individual references     x.load_individual_references()      # update the reference for a planet's period/epoch     x.update_reference(planets='HD189733b', references='Ivshina + Winn 2022')      # update another value      x.update_values(planets='HD189733b', radius=1*u.R_jupiter, radius_uncertainty=0.1*u.R_jupiter)   In\u00a0[12]: Copied! <pre>e = ea.TransitingExoplanets()\ne = e[e.distance() &lt; 50*u.pc]\ncurate_population(e)\n</pre> e = ea.TransitingExoplanets() e = e[e.distance() &lt; 50*u.pc] curate_population(e) <pre>(loading individual references may take up to a few minutes)\n</pre> <pre>['hd189733b'] | radius: 12.666 earthRad &gt; 1.0 jupiterRad\n['hd189733b'] | radius_uncertainty_lower: -0.112 earthRad &gt; -0.1 jupiterRad\n['hd189733b'] | radius_uncertainty_upper: 0.112 earthRad &gt; 0.1 jupiterRad\n</pre> In\u00a0[13]: Copied! <pre>e.save('curated-population.ecsv')\n</pre> e.save('curated-population.ecsv') <pre>\n        Saved \u2728 Subset of Transiting Exoplanets | 230 elements \u2728 to curated-population.ecsv.\n        It can be reloaded with `x = Population('curated-population.ecsv')`\n        \n</pre> In\u00a0[14]: Copied! <pre>curated_and_saved = ea.Population('curated-population.ecsv')\ncurated_and_saved['HD189733'].radius()\n</pre> curated_and_saved = ea.Population('curated-population.ecsv') curated_and_saved['HD189733'].radius() Out[14]:  $[11.208981] \\; \\mathrm{R_{\\oplus}}$  <p>Now that you are confident your population is carefully curated, you can zoom along to play with Filtering, Visualizing, or Observing!</p>"},{"location":"curating/#curating","title":"Curating\u00b6","text":"<p>Sometimes, you might have good reason to want to replace some of the values in a <code>Population</code> with better ones. Maybe you prefer one reference over another, maybe you have some unpublished measurements you want to include, or maybe you just want to experiment with changing some values. This page mostly discusses curating the data inside an <code>Exoplanet</code> population, but some of the methods might generally apply to other populations.</p>"},{"location":"curating/#changes-are-temporary","title":"Changes are Temporary\u00b6","text":"<p>Please note, the changes made with <code>update_reference</code> or <code>update_values</code> will take place only within the current Python session. The underlying standardized data file is unchanged. The bottom of this page shows instructions for saving and loading a curated population.</p>"},{"location":"curating/#using-different-references-in-an-exoplanet-population","title":"Using Different References in an <code>Exoplanet</code> Population\u00b6","text":"<p>The main data in the <code>Exoplanets</code> population come from the NASA Exoplanet Archive Planetary Systems Composite Parameters table. There is one entry in this population for each planet in the archive.</p>"},{"location":"curating/#updating-values-in-an-exoplanet-population","title":"Updating Values in an <code>Exoplanet</code> Population\u00b6","text":"<p>If we have some custom values we'd like to apply to a planet, we can update its data with the <code>.update_value</code> wrapper.</p>"},{"location":"curating/#curating-your-own-exoplanet-population","title":"Curating Your Own Exoplanet Population\u00b6","text":"<p>You might want to be able to regularly curate many changes to the default exoplanet parameters from the NASA Exoplanet Archive, and also be able to reapply those changes even when downloading newly updated archive data. In general, that might look like the following:</p> <ul> <li>Write a function called something like <code>curate_population()</code>, that makes the changes you want by serialling combining <code>.update_reference</code> and <code>.update_values</code>. You might consider saving this function in a local module and importing it whenever you need it.</li> <li>Generate an <code>Exoplanets</code> population (or some subset of it), and apply your function to it. This function will change the population in-place; if you want to access the unmodified parameters, you'll need to create a new population.</li> <li>If you want to save and reuse your curation, use the <code>population_to_save.save(filename)</code> method to save your curated population out to a local file and <code>loaded_population = Population(filename)</code> to load it back in.</li> </ul>"},{"location":"curating/#problems","title":"\ud83d\udd14 Problems: \ud83d\udd14\u00b6","text":"<p>Please note there are still a couple of problems that need solving:</p> <ul> <li>A curated population that has been saved out to a file and then reloaded via <code>Population(filename)</code> will (currently) always load in as a <code>Population</code> object. It therefore won't have any of the special powers of the speciality predefined populations like <code>Exoplanets</code>.</li> <li>Sometimes (?) trying to due curation with <code>update_reference</code> gobbles up bonkers memory, presumably something to do with trying to index large tables many times. This might potentially be solvable with some more careful memory management or index-resetting? Curating mostly works, but sometimes it feels like there's a monster lurking underneath.</li> </ul> <p>If any of these problems are catastrophic for your, please open an issue and we'll try to fix it!*</p>"},{"location":"documentation/","title":"Writing Documentation","text":""},{"location":"documentation/#writing-documentation","title":"Writing Documentation\u00b6","text":"<p>If you're contributing a new feature to <code>exoatlas</code>, please consider also contributing some documentation to explain how your feature works. Here's the very short version of how to add to the documentation:</p> <ol> <li>Install in development mode (see Installation), so you have access to <code>mkdocs</code> and the various extensions needed to render the documentation.</li> <li>Decide whether your explanation would fit well within an existing page or whether you need a new one. In the <code>docs/</code> directory, find the appropriate <code>.ipynb</code> notebook file or create a new one. If you create a new one, add it to the <code>nav:</code> section of the <code>mkdocs.yml</code> file in the main repository directory so that <code>mkdocs</code> will know to include it.</li> <li>Write your example and explanation in a <code>.ipynb</code> file. Your audience should be smart people who want to use the code but don't have much experience with it yet. Be friendly and encouraging!</li> <li>From the Terminal, run <code>mkdocs serve</code>. This will convert all of the source notebooks into a live website, and give you a little address that you can copy and paste into a browser window. While that <code>mkdocs serve</code> command is still running, small changes you make to existing <code>.ipynb</code> source files will appear (sometimes after a few minutes) on the live locally-hosted webserver.</li> <li>Once you're happy with your new documentation, before committing it to the repository, please run \"Kernal &gt; Restart &amp; Clear Output\" or something similar to remove all outputs from the source notebook file. The <code>exoatlas</code> repository will hang onto all changes that you commit to it, so it would very quickly get annoyingly large unless we leave the outputs out of committed notebook files. Double check the outputs are all gone, save your notebook, and then commit it to the <code>git</code> repository (see Contributing Code with GitHub).</li> </ol> <p>Periodically, after reviewing and copy-editing the documentation, we'll deploy the newest version up to the web at zkbt.github.io/exoatlas/ for all to enjoy.</p>"},{"location":"filtering/","title":"Filtering","text":"In\u00a0[1]: Copied! <pre>import exoatlas as ea\nimport exoatlas.visualizations as vi\n\nea.version()\n</pre> import exoatlas as ea import exoatlas.visualizations as vi  ea.version() <pre>\nTraceback (most recent call last):\n\n  File ~/miniconda3/envs/exoatlas/lib/python3.13/site-packages/IPython/core/interactiveshell.py:3579 in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n\n  Cell In[1], line 2\n    import exoatlas.visualizations as vi\n\n  File ~/Dropbox/zach/code/exoatlas/exoatlas/visualizations/__init__.py:2\n    from .galleries import *\n\n  File ~/Dropbox/zach/code/exoatlas/exoatlas/visualizations/galleries/__init__.py:3\n    from .preset_galleries import *\n\n  File ~/Dropbox/zach/code/exoatlas/exoatlas/visualizations/galleries/preset_galleries.py:139\n    Depth(lim=[5e-8, 0.2]]),\n                         ^\nSyntaxError: closing parenthesis ']' does not match opening parenthesis '('\n</pre> In\u00a0[2]: Copied! <pre>e = ea.TransitingExoplanets()\ns = ea.SolarSystem()\n</pre> e = ea.TransitingExoplanets() s = ea.SolarSystem() <p>Throughout, let's use <code>PlanetGallery</code> to visualize how the various filtering cuts remove planets from our observing sample.</p> In\u00a0[3]: Copied! <pre>vi.PlanetGallery().build(e);\n</pre> vi.PlanetGallery().build(e); <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 vi.PlanetGallery().build(e);\n\nNameError: name 'vi' is not defined</pre> In\u00a0[4]: Copied! <pre>unfiltered = e[:]\nunfiltered.color = 'orchid'\nunfiltered.label = 'Unfiltered'\n</pre> unfiltered = e[:] unfiltered.color = 'orchid' unfiltered.label = 'Unfiltered' In\u00a0[5]: Copied! <pre>import astropy.units as u\n\nis_big = e.radius() &gt; 1.6 * u.Rearth\nfiltered = e[is_big]\nfiltered.label = 'Big'\nfiltered\n</pre> import astropy.units as u  is_big = e.radius() &gt; 1.6 * u.Rearth filtered = e[is_big] filtered.label = 'Big' filtered Out[5]: <pre>\u2728 Big | 3033 elements \u2728</pre> In\u00a0[6]: Copied! <pre>vi.PlanetGallery().build([unfiltered, filtered]);\n</pre> vi.PlanetGallery().build([unfiltered, filtered]); <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[6], line 1\n----&gt; 1 vi.PlanetGallery().build([unfiltered, filtered]);\n\nNameError: name 'vi' is not defined</pre> In\u00a0[7]: Copied! <pre>is_short = e.transit_duration() &lt; 3 * u.hour\nfiltered = e[is_short]\nfiltered.label = 'Short'\nfiltered\n</pre> is_short = e.transit_duration() &lt; 3 * u.hour filtered = e[is_short] filtered.label = 'Short' filtered Out[7]: <pre>\u2728 Short | 1986 elements \u2728</pre> In\u00a0[8]: Copied! <pre>vi.PlanetGallery().build([unfiltered, filtered]);\n</pre> vi.PlanetGallery().build([unfiltered, filtered]); <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[8], line 1\n----&gt; 1 vi.PlanetGallery().build([unfiltered, filtered]);\n\nNameError: name 'vi' is not defined</pre> In\u00a0[9]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\n\nsignal = e.transmission_signal()\nwavelength = 0.7 * u.micron\ndt = 1 * u.hour\nR = 10\nnoise = e.depth_uncertainty(telescope=\"APO\", wavelength=wavelength, dt=dt, R=R)\nsnr = signal / noise\n\nplt.figure(figsize=(8,5))\nplt.scatter(noise, signal, c=snr, vmin=1, vmax=10)\nplt.xscale(\"log\")\nplt.yscale(\"log\")\nplt.axis(\"scaled\")\nplt.xlabel(\"\")\nplt.ylim(1e-6, 1e-2)\nplt.xlim(1e-6, 1e-2)\nplt.plot([1e-6, 1e-2], [1e-6, 1e-2], color='black', linewidth=3, linestyle='--', alpha=0.3)\nplt.colorbar(label=\"S/N\")\nplt.xlabel(rf\"Predicted Photon Noise\\n($\\lambda=${wavelength}, dt={dt}, R={R})\")\nplt.ylabel(r\"Possible Transmission\\nSignal Size ($2HR_p/R_{\\star}^2$)\");\n</pre> import matplotlib.pyplot as plt import numpy as np  signal = e.transmission_signal() wavelength = 0.7 * u.micron dt = 1 * u.hour R = 10 noise = e.depth_uncertainty(telescope=\"APO\", wavelength=wavelength, dt=dt, R=R) snr = signal / noise  plt.figure(figsize=(8,5)) plt.scatter(noise, signal, c=snr, vmin=1, vmax=10) plt.xscale(\"log\") plt.yscale(\"log\") plt.axis(\"scaled\") plt.xlabel(\"\") plt.ylim(1e-6, 1e-2) plt.xlim(1e-6, 1e-2) plt.plot([1e-6, 1e-2], [1e-6, 1e-2], color='black', linewidth=3, linestyle='--', alpha=0.3) plt.colorbar(label=\"S/N\") plt.xlabel(rf\"Predicted Photon Noise\\n($\\lambda=${wavelength}, dt={dt}, R={R})\") plt.ylabel(r\"Possible Transmission\\nSignal Size ($2HR_p/R_{\\star}^2$)\"); In\u00a0[10]: Copied! <pre>is_snr = snr &gt; 5\nfiltered = e[is_snr]\nfiltered.label = 'High S/N'\nfiltered\n</pre> is_snr = snr &gt; 5 filtered = e[is_snr] filtered.label = 'High S/N' filtered Out[10]: <pre>\u2728 High S/N | 244 elements \u2728</pre> In\u00a0[11]: Copied! <pre>vi.PlanetGallery().build([unfiltered, filtered]);\n</pre> vi.PlanetGallery().build([unfiltered, filtered]); <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[11], line 1\n----&gt; 1 vi.PlanetGallery().build([unfiltered, filtered]);\n\nNameError: name 'vi' is not defined</pre> In\u00a0[12]: Copied! <pre>from astroplan import Observer\nfrom astropy.time import Time\n\nobservatory_string = \"APO\"\ndate = Time.now()\ndate_string = date.iso.split(' ')[0]\nobservatory = Observer.at_site(observatory_string, timezone=\"US/Hawaii\")\n</pre> from astroplan import Observer from astropy.time import Time  observatory_string = \"APO\" date = Time.now() date_string = date.iso.split(' ')[0] observatory = Observer.at_site(observatory_string, timezone=\"US/Hawaii\") In\u00a0[13]: Copied! <pre>local_midnight = observatory.midnight(date)\nsidereal_time_at_midnight = observatory.local_sidereal_time(local_midnight)\nra_at_midnight = sidereal_time_at_midnight\nra_at_midnight\n</pre> local_midnight = observatory.midnight(date) sidereal_time_at_midnight = observatory.local_sidereal_time(local_midnight) ra_at_midnight = sidereal_time_at_midnight ra_at_midnight Out[13]:  $12^{\\mathrm{h}}28^{\\mathrm{m}}40.90499247^{\\mathrm{s}}$  In\u00a0[14]: Copied! <pre>declination_at_zenith = observatory.latitude\ndeclination_at_zenith\n</pre> declination_at_zenith = observatory.latitude declination_at_zenith Out[14]:  $32^\\circ46{}^\\prime48{}^{\\prime\\prime}$  In\u00a0[15]: Copied! <pre>is_dec = np.abs(e.dec() - declination_at_zenith) &lt; 60 * u.deg\nis_ra = np.abs((e.ra() - ra_at_midnight).wrap_at(180 * u.deg)) &lt; 6 * u.hourangle\n\nfiltered = e[is_dec * is_ra]\nfiltered.name = 'Up at Night'\n\nkw = dict(s=2, alpha=0.25)\nplt.scatter(e.ra(), e.dec(), **kw)\nplt.scatter(filtered.ra(), filtered.dec(), **kw)\nplt.xlabel(\"Right Ascension (degree)\")\nplt.ylabel(\"Declination (degree)\")\nplt.axis(\"scaled\")\nplt.ylim(-90, 90)\nplt.xlim(360, 0)\nplt.title(f\"{observatory_string} | {date_string}\");\n</pre> is_dec = np.abs(e.dec() - declination_at_zenith) &lt; 60 * u.deg is_ra = np.abs((e.ra() - ra_at_midnight).wrap_at(180 * u.deg)) &lt; 6 * u.hourangle  filtered = e[is_dec * is_ra] filtered.name = 'Up at Night'  kw = dict(s=2, alpha=0.25) plt.scatter(e.ra(), e.dec(), **kw) plt.scatter(filtered.ra(), filtered.dec(), **kw) plt.xlabel(\"Right Ascension (degree)\") plt.ylabel(\"Declination (degree)\") plt.axis(\"scaled\") plt.ylim(-90, 90) plt.xlim(360, 0) plt.title(f\"{observatory_string} | {date_string}\"); In\u00a0[16]: Copied! <pre>vi.PlanetGallery().build([unfiltered, filtered]);\n</pre> vi.PlanetGallery().build([unfiltered, filtered]); <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[16], line 1\n----&gt; 1 vi.PlanetGallery().build([unfiltered, filtered]);\n\nNameError: name 'vi' is not defined</pre> In\u00a0[17]: Copied! <pre>targets = e[is_big * is_short * is_snr * is_ra * is_dec]\ntargets.label = 'Observable?!'\ntargets\n</pre> targets = e[is_big * is_short * is_snr * is_ra * is_dec] targets.label = 'Observable?!' targets Out[17]: <pre>\u2728 Observable?! | 32 elements \u2728</pre> In\u00a0[18]: Copied! <pre>vi.PlanetGallery().build([unfiltered, targets]);\n</pre> vi.PlanetGallery().build([unfiltered, targets]); <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[18], line 1\n----&gt; 1 vi.PlanetGallery().build([unfiltered, targets]);\n\nNameError: name 'vi' is not defined</pre> <p>Let's print out the names of the planets that made it through all our cuts.</p> In\u00a0[19]: Copied! <pre>print(targets.name())\n</pre> print(targets.name()) <pre>['55 Cnc e' 'GJ 1214 b' 'GJ 3470 b' 'GJ 436 b' 'Gaia-2 b' 'HAT-P-12 b'\n 'HAT-P-18 b' 'HAT-P-26 b' 'HAT-P-30 b' 'HATS-37 A b' 'K2-31 b'\n 'KELT-23 A b' 'NGTS-5 b' 'Qatar-6 b' 'TOI-1173 b' 'TOI-1199 b'\n 'TOI-1248 b' 'TOI-1273 b' 'TOI-1789 b' 'TOI-1855 b' 'TOI-2134 b'\n 'TOI-3884 b' 'TOI-5108 b' 'TOI-519 b' 'WASP-101 b' 'WASP-107 b'\n 'WASP-183 b' 'WASP-34 b' 'WASP-39 b' 'WASP-84 b' 'WASP-85 A b' 'XO-1 b']\n</pre> <p>Let's also make a table that includes more useful information, like positions and transit ephemerides, which we could use as an input to plan an observing run.</p> In\u00a0[20]: Copied! <pre>table = targets.create_planning_table()\ntable\n</pre> table = targets.create_planning_table() table Out[20]: QTable length=32 nameradecperiodtransit_midpointtransit_durationradiusrelative_insolationstellar_radiusstellar_teffdistance degdegddhearthRadsolRadKpc str29float64float64float64float64float64float64float64float64float64float64 55 Cnc e133.146837328.32981540.73654742457063.20961.57322081.8752665.05028596297730.945172.012.5855 GJ 1214 b258.83139914.96067951.580404532459639.7812620.869662.73317.2157917319474870.223101.014.6427 GJ 3470 b119.773502115.3912093.3366496nan1.89844.5722.990228825243590.53652.029.4214 GJ 436 b175.550536326.70306692.643883122454510.801621.005364.1730.705347872194140.463586.119.75321 Gaia-2 b110.735330867.25265653.69152242458843.988752.72075814.818522.83690950078571.065720.0209.229 HAT-P-12 b209.388645243.493313.21305982454419.195562.337610.749142.343470840354030.74650.0142.751 HAT-P-18 b256.34637633.01232515.5080232454715.021742.714411.15386.332910879218910.754803.0161.4 HAT-P-26 b213.15655084.05941754.234522456901.0594582.45527.062190.690462976648520.875079.0141.837 HAT-P-30 b123.94984315.83686692.81062457775.2127782.249925416.1411168.347286029111.316304.0213.985 ................................. TOI-519 b124.6067582-19.66279181.26523282459013.152991.23611.54555.744978379885080.353322.0115.557 WASP-101 b98.3511016-23.4860863.585722458387.8325222.707206516.0291030.8941917491131.316380.0201.224 WASP-107 b188.3864277-10.1462141nan2457584.3297462.7386410.53651.0827913896996360.664425.064.7414 WASP-183 b163.7888521-0.73706634.11177712457796.18452.01616.477288.046696321832660.895440.0325.377 WASP-34 b165.3993679-23.86094574.317682458654.36452.102411.209398.416600967343750.915700.0132.096 WASP-39 b217.3266477-3.44449944.05528422459783.50152.803214.93267.74875585370610.925485.0213.982 WASP-84 b131.10699591.85989338.523496482457956.711942.7610.7278.170124926725390.775280.0100.588 WASP-85 A b175.90803286.56378422.65567772456847.4728562.5958413.899558.30405985293480.946112.0141.887 XO-1 b240.549274528.16962483.941532455385.519782.971212.778344.47709970850330.885750.0163.553 <p>Let's save that table out to a text file, and also make sure we can load it back in again.</p> In\u00a0[21]: Copied! <pre>table.write(\n    f\"planets-to-observe-{observatory_string}-{date_string}.ecsv\", overwrite=True\n)\n</pre> table.write(     f\"planets-to-observe-{observatory_string}-{date_string}.ecsv\", overwrite=True ) In\u00a0[22]: Copied! <pre>from astropy.io.ascii import read\n\nread(f\"planets-to-observe-{observatory_string}-{date_string}.ecsv\")\n</pre> from astropy.io.ascii import read  read(f\"planets-to-observe-{observatory_string}-{date_string}.ecsv\") Out[22]: QTable length=32 nameradecperiodtransit_midpointtransit_durationradiusrelative_insolationstellar_radiusstellar_teffdistance degdegddhearthRadsolRadKpc str11float64float64float64float64float64float64float64float64float64float64 55 Cnc e133.146837328.32981540.73654742457063.20961.57322081.8752665.050285960.945172.012.5855 GJ 1214 b258.83139914.96067951.580404532459639.781260.869662.73317.21579173190.223101.014.6427 GJ 3470 b119.773502115.3912093.3366496nan1.89844.5722.99022882520.53652.029.4214 GJ 436 b175.550536326.70306692.643883122454510.801621.005364.1730.70534787220.463586.119.75321 Gaia-2 b110.735330867.25265653.69152242458843.988752.72075814.818522.8369095011.065720.0209.229 HAT-P-12 b209.388645243.493313.21305982454419.195562.337610.749142.343470840.74650.0142.751 HAT-P-18 b256.34637633.01232515.5080232454715.021742.714411.15386.33291087920.754803.0161.4 HAT-P-26 b213.15655084.05941754.234522456901.059462.45527.062190.6904629770.875079.0141.837 HAT-P-30 b123.94984315.83686692.81062457775.212782.249925416.1411168.347286031.316304.0213.985 ................................. TOI-519 b124.6067582-19.66279181.26523282459013.152991.23611.54555.74497837990.353322.0115.557 WASP-101 b98.3511016-23.4860863.585722458387.832522.707206516.0291030.894191751.316380.0201.224 WASP-107 b188.3864277-10.1462141nan2457584.329752.7386410.53651.08279138970.664425.064.7414 WASP-183 b163.7888521-0.73706634.11177712457796.18452.01616.477288.0466963220.895440.0325.377 WASP-34 b165.3993679-23.86094574.317682458654.36452.102411.209398.4166009670.915700.0132.096 WASP-39 b217.3266477-3.44449944.05528422459783.50152.803214.93267.7487558540.925485.0213.982 WASP-84 b131.10699591.85989338.523496482457956.711942.7610.7278.17012492670.775280.0100.588 WASP-85 A b175.90803286.56378422.65567772456847.472862.5958413.899558.3040598530.946112.0141.887 XO-1 b240.549274528.16962483.941532455385.519782.971212.778344.4770997090.885750.0163.553 <p>You can try filtering populations for your own devious and wonderful purposes, using whatever criteria you like!</p>"},{"location":"filtering/#filtering","title":"Filtering\u00b6","text":"<p>Let's start from all the transiting exoplanets in the NASA Exoplanet Archive, and then filter down into a <code>Population</code> of planets we might want to consider observing.</p>"},{"location":"filtering/#download-exoplanet-data","title":"Download Exoplanet Data\u00b6","text":"<p>Let's download a recent list of transiting exoplanets from the NASA Exoplanet Archive. We should, as always, be careful not to completely trust every detail of this database. For any particular planet, there's a possibility that details might be wrong or missing so for anything super crucial, it would be very wise to double check.</p>"},{"location":"filtering/#define-filtering-criteria","title":"Define Filtering Criteria\u00b6","text":"<p>Let's make some cuts to this sample in order to select systems that might be worth trying to observe at the telescope. We'll start by defining an unfiltered populatioin, for comparison.</p>"},{"location":"filtering/#is-it-big-enough","title":"Is it big enough?\u00b6","text":"<p>To ensure that a planet has a hydrogen-dominated atmosphere (which makes interpreting a transmission spectrum a lot easier), we could place a cut on the planet's radius. \"Most 1.6 Earth-radius planets are not rocky\", so let's try cutting there.</p>"},{"location":"filtering/#is-the-duration-short-enough","title":"Is the duration short enough?\u00b6","text":"<p>An ideal transit observation would include at least some baseline before the start and after the end of the transit itself. When observing from a ground-based telescope, practically that means it's really hard to observe (complete) transits with durations longer than about a few hours.</p>"},{"location":"filtering/#is-transmission-spectroscopy-possible","title":"Is transmission spectroscopy possible?\u00b6","text":"<p>The best precision we could possibly acheive on measuring a transit depth is set by the number of photons that we can gather with our telescope. If the signal we're hoping to detect for transmission spectroscopy (see Observing) is smaller than that expected precision, it's basically hopeless that we'll see anything. So, let's at least limit our sample to targets with a reasonably high predicted signal-to-noise ratio.</p>"},{"location":"filtering/#is-it-above-the-horizon-at-night","title":"Is it above the horizon at night?\u00b6","text":"<p>If we're observing at a particular time of year from a particular observatory, only some targets will be high enough in the sky to be observable at night. Let's place a coarse cut on right ascensions and declinations, so we don't waste time considering planets that are beneath the Earth when we're trying to observe.</p>"},{"location":"filtering/#make-target-sample","title":"Make Target Sample\u00b6","text":"<p>After looking at each of them one by one, let's put all of those filtering criteria together.</p>"},{"location":"github/","title":"Contributing Code with GitHub","text":""},{"location":"github/#contributing-code-with-github","title":"Contributing Code with GitHub\u00b6","text":"<p>There are oodles of great tutorials on various aspects of contributing to collaborative code projects with GitHub. This page is meant to provide a quick, recipe-like answer to the question \"how do I contribute to the <code>exoatlas</code> package?\"</p>"},{"location":"github/#should-i-submit-an-issue-to-the-exoatlas-github-repository","title":"Should I submit an Issue to the <code>exoatlas</code> GitHub repository?\u00b6","text":"<p>Yes! You tried out <code>exoatlas</code> and maybe thought it had some neat features, but you encountered something that didn't work quite how you expected it to, a question that you couldn't find an answer to in the documentation, or a feature that you wished existed. Those would all be great motivations to go to the <code>exoatlas</code> GitHub repository to submit an Issue!</p> <p>But...we know you! You're saying to yourself \"Oh, gosh, they have their hands full, I don't want to bother them right now. I'm sure I'm the only one having this problem or with this question about how <code>exoatlas</code> works. My idea probably matters only to me and not anyone else. I don't want to make more workf for other folks.\" You're wringing your hands and anxiously worrying about about whether to submit an Issue.</p> <p>Still, can we please encourage you share your problem, ask your question, or make your suggestion? Your experience and curiosity and creativity would be extremely valuable contributions to the package, and make it better for everyone. It's super exciting to hear that someone new else trying to use this code package, and every bit of discussion about how to improve it is super helpful. I promise we're very friendly! So, please, hop on over and submit an Issue!</p>"},{"location":"github/#how-do-we-get-started-with-git-and-github","title":"How do we get started with <code>git</code> and GitHub?\u00b6","text":"<p>Yay! You're interested in contributing some code to the <code>exoatlas</code> package. The first step will be to make sure you have a basic familiarity with <code>git</code> and GitHub as tools for safe and collaborative coding.</p> <p>Christina Hedges has written some great resources on coding-related workflows for astronomy, including a tutorial for getting started with <code>git</code> and GitHub that you can watch here. If you're entirely new to these tools, please work through her tutorial and then come back here. If you haven't created one yet, make yourself a GitHub account</p>"},{"location":"github/#how-do-we-contribute-new-code","title":"How do we contribute new code?\u00b6","text":"<p>Because we have more than one person working on <code>exoatlas</code> code, let's please use separate <code>git</code> branches for developing new features. Using branches allows us to write code in parallel and merge it together later, without constantly having to make sure that everything everybody writes is up-to-date everywhere all at once. We're generally trying to follow something like the Gitflow Workflow, to allow us to make changes to the shared code that are a little bit buffered from the published code used by non-developers.</p> <p>There three branches you should know about, and only two you should probably interact with:</p> <ul> <li>The <code>main</code> branch hosts the published version of the code for public users. New <code>pip</code> versions of the code will be released from the <code>main</code> branch. Most developers will rarely interact directly with the <code>main</code> branch.</li> <li>The <code>develop</code> branch is the active branch for shared development. New feature branches should be created from the <code>develop</code> branch and once they're reviewed be merged back into <code>develop</code>. Occasionally, and only after careful testing and documentation edits, the <code>develop</code> branch will get merged into the <code>main</code> branch and published to <code>pip</code>.</li> <li>Your <code>add-amazing-awesome-new-feature</code> branch (where you replace the name with something more specific and informative) is a temporary branch that you created off of <code>develop</code> to add your amazing awesome new feature. You should make your changes and commits to that branch, and when you're ready to discuss to your contribution (either as a draft or a mostly finished product), you should submit a Pull Request from this feature branch into the <code>develop</code> branch. Features should be tested well enough that they won't break <code>develop</code> when they get merged into it (but if they do, possibly due to a temporary conflict with another feature branch, it's OK because the <code>main</code> branch is still safe). Once it's merged, your feature branch will be deleted, and you can start a new one to add a different new feature.</li> </ul> <p>With these branches, here's what writing some new code for <code>exoatlas</code> might look like for you. The following describes using <code>git</code> from the Terminal prompt. In practice, you might interact with <code>git</code> mostly through Visual Studio Code, PyCharm, GitHub Desktop, or some other tool.</p> <ol> <li>Discuss your plans in an Issue. You might start from trying to address an existing issue, or you might add a new issue of your own. Either way, it's really helpful to let other folks know \"here's what I'm trying to do\" to avoid duplicate or unfocused efforts. If you're not already a Collaborator on the <code>exoatlas</code> repository, we can add you at this point!</li> <li>Use the Installation instructions to complete the Developer Installation. This will download the <code>develop</code> branch of the <code>exoatlas</code> repository onto your computer and set up your environment to point to the repository's directory.</li> </ol> <pre><code>git clone https://github.com/zkbt/exoatlas.git\ncd exoatlas\npip install -e '.[develop]'\n</code></pre> <ol> <li>Create a new feature branch off of <code>develop</code>. Check out that branch, so that all commits you make will be associated with that branch.</li> </ol> <pre><code>git checkout develop\ngit branch add-amazing-awesome-new-feature\ngit checkout add-amazing-awesome-new-feature\n</code></pre> <ol> <li>Write your code. Ideally you should also please some useful tests, but it's OK for us to iterate on those as more of a conversaion. Once you've saved some changes to the code, commit those changes to your feature branch. (You can confirm you're on your feature branch by running <code>git branch</code> and seeing which branch has the <code>*</code>.)</li> </ol> <pre><code>git add .\ngit commit -m \"{include informative commit message here}\"\n</code></pre> <p>Up to this point, whatever changes you have committed are still only stored on your computer.</p> <ol> <li>To start sharing your new code, push your branch up to GitHub. The first time you run this push command, you'll probably get some instructions about how to link your local branch to a new remote one that you're about to create; follow them.</li> </ol> <pre><code>git push\n</code></pre> <p>Now your branch and most recently pushed commits should appear in the GitHub list of branches.</p> <ol> <li>To ask for your code to be reviewed, either because you think it's finished or because you've completed enough of a draft to be useful to start discussing, submit a Pull Request asking us to pull the code from your feature branch into <code>develop</code>. We'll probably discuss a few aspects of it and suggest some changes, which can be implemented by continuing to push new commits to your feature branch as long as the Pull Request is still open. Once it's tested and works and we're all happy with it, we'll merge the code into <code>develop</code>, from where it will eventually then be merged into the <code>main</code> branch and released in the latest <code>pip</code> version.</li> <li>\ud83c\udf08\ud83c\udf89\ud83e\udd29 Celebrate!</li> </ol>"},{"location":"github/#what-kinds-of-files-should-we-commit","title":"What kinds of files should we commit?\u00b6","text":"<p>Every file change commit to the repository will be stored and able to be recovered in the future. That's great for being able to go back to previous versions in the code's history, but it means that the repository could very easily get very big if we include lots of large files in our commits. Large files are extra troublesome if they change frequently, because then we're storing a new copy of every large file in our repository.</p> <p>Let's try to keep the <code>exoatlas</code> repository relatively slim. To do that, please:</p> <ul> <li>Avoid committing large data, image, or movie files to the repository. If you think you need to include a large file (anything over ~1 MB), raise an Issue to discuss your plans. There might be a better alternative.</li> <li>Avoid committing scratch jupyter notebook files where you're testing out new code. The only notebooks that should be committed to <code>exoatlas</code> are ones meant to serve as public documentation; those should be stored in the <code>docs/</code> folder as described in Writing Documentation and their outputs should be cleared before saving.</li> </ul>"},{"location":"github/#wait-i-have-a-question-thats-not-answered-here","title":"Wait, I have a question that's not answered here!\u00b6","text":"<p>This page is a whirlwind tour! We probably missed lots of important information. If you have a question, no matter how small or large or seemingly basic, please ask Zach or submit an Issue.</p>"},{"location":"installation/","title":"Installation","text":"In\u00a0[1]: Copied! <pre>import exoatlas\n\nexoatlas.version()\n</pre> import exoatlas  exoatlas.version() Out[1]: <pre>'0.6.1'</pre> <p>Happy <code>exoatlas</code>-ing!</p>"},{"location":"installation/#installation","title":"Installation\u00b6","text":"<p>For installing this code we assume you have a Python environment set up, into which you can install packages via <code>pip</code>. If so, please continue to one of the installation options below.</p> <p>If this isn't the case, we recommend installing the Anaconda Python distribution, and using <code>conda</code> to manage the <code>python</code> environment(s) you have installed on your computer. One tutorial (of many) about how to get started with Python and creating <code>conda</code> environments is available here.</p>"},{"location":"installation/#basic-installation","title":"Basic Installation\u00b6","text":"<p>If you want to install into your current environment, the basic installation should be pretty simple. From the Terminal or Anaconda Prompt, please run</p> <pre><code>pip install exoatlas\n</code></pre> <p>and it should install everything, along with all the necessary dependencies.</p> <p>If you previously installed this package and need to grab a newer version, run</p> <pre><code>pip install --upgrade exoatlas\n</code></pre> <p>to download any officially released updates.</p>"},{"location":"installation/#basic-installation-in-new-conda-environment","title":"Basic Installation in New <code>conda</code> Environment\u00b6","text":"<p>If you are at all worried about the installation messing up other existing packages on your computer or if you're having trouble getting a tricky dependency to install, please consider installing into a new <code>conda</code> environment. Environments are independent of each other, so what you install into one shouldn't affect others.</p> <p>From the Terminal or Anaconda Prompt, please run</p> <pre><code>conda create -n my-neato-exoatlas-environment python\n</code></pre> <p>to create a new, empty environment centered on a recent-ish version of <code>python</code>. You may want to choose a shorter name for your neato environment, as it's something you'll need to type every time you want to use this environment. Run</p> <pre><code>conda activate my-neato-exoatlas-environment\n</code></pre> <p>to enter than environment. You can check that you're in it by running</p> <pre><code>conda env list\n</code></pre> <p>and looking for a little star next to the environment name. Now, from within this environment, run</p> <pre><code>pip install --upgrade exoatlas\n</code></pre> <p>to install <code>exoatlas</code> and all its dependencies (or follow the Developer Installation instructions immediately below), into this specific environment.</p> <p>One thing to watch out for is that if you haven't installed whatever tools you use to work with <code>python</code> (such as <code>jupyter</code> or <code>spyder</code>) into this environment, you might not be able to open them or you might open them from your base environment without access to this package. To fix that, run</p> <pre><code>conda install jupyter spyder\n</code></pre> <p>from inside your environment. From now on, whenever you want to use this environment, activate it with</p> <pre><code>conda activate my-neato-exoatlas-environment\n</code></pre> <p>and then open your <code>python</code> interface from within that environment, as with any one of these</p> <pre><code>jupyter notebook \njupyter lab\nspyder \n</code></pre> <p>Other  tools like Microsoft Visual Studio Code will probably let you select which environment you want to use for running code.</p> <p>Good luck!</p>"},{"location":"installation/#developer-installation","title":"Developer Installation\u00b6","text":"<p>If you want to install this code while being able to edit and develop it, you can clone its GitHub repository onto your own computer. This allows you to edit it for your own sake and/or to draft changes that can be contributed to the public package (see Contributing \ud83c\udf08 Code with GitHub).</p> <p>To install directly as an editable package on your local computer, run</p> <pre><code>git clone https://github.com/zkbt/exoatlas.git\ncd exoatlas\npip install -e '.[develop]'\n</code></pre> <p>The <code>-e .</code> will point your environment's <code>exoatlas</code> package to your local folder, meaning that any changes you make in the repository will be reflected in what Python sees when it tries to <code>import exoatlas</code>. Including the <code>[develop]</code> after the <code>.</code> will install both the dependencies for the package itself and the extra dependencies required for development (= testing and documentation).</p>"},{"location":"installation/#did-it-work","title":"Did it work?\u00b6","text":"<p>You can quickly test whether your installation worked, and what version you have, by running the Python code</p>"},{"location":"observing/","title":"Observing","text":"In\u00a0[1]: Copied! <pre>import exoatlas as ea\nimport exoatlas.visualizations as vi\nimport astropy.units as u\n\nea.version()\n</pre> import exoatlas as ea import exoatlas.visualizations as vi import astropy.units as u  ea.version() Out[1]: <pre>'0.6.1'</pre> In\u00a0[2]: Copied! <pre>e = ea.TransitingExoplanets()\ns = ea.SolarSystem()\n</pre> e = ea.TransitingExoplanets() s = ea.SolarSystem() <p>Let's use a quick built-in summary to visualize how easy (or difficult) these planets are to observe with different methods. We'll include the Solar System where we reasonably can, for comparison.</p> In\u00a0[3]: Copied! <pre>vi.ObservableGallery().build([ s, e]);\n</pre> vi.ObservableGallery().build([ s, e]);  <p>That default <code>ObservableGallery</code> plot shows a lot! It defaults to imagining we're observing with a cartoonish telescope with JWST's $\\sf 25~m^2$ collecting area, a very approximate $\\sf 30\\%$ efficiency of detecting incoming photons, for a duration of one $\\sf 1~hour$, at a spectral resolution of $\\sf R = \\lambda/\\Delta \\lambda = 20$, at a wavelength of $\\sf \\lambda = 5~\\mu m$. This might represent (to order of magnitude) a typical observation of a transiting exoplanet with that telescope.</p> <p>The vertical axes are shared along each row:</p> <ul> <li>Planet Radius tends to be pretty well known for basically all transiting exoplanets. In very coarse terms, planets close to $\\sf 1 R_{\\oplus}$ are fairly likely to be mostly rocky, whereas planets closer to $\\sf 10 R_{\\oplus}$ are almost certainly hydrogen-rich gas giants.</li> <li>Stellar Brightness might often be expressed in units like $\\sf photons/m^2/s/\\mu m$, but here is converted to units of the effective telescope collecting area, the observation duration, and the spectral resolution. Knowing how many photons could be detected while observing a transit is essential for estimating the photon noise floor, meaning the best precision with which we could potentially measure the brightness of the star: if we on average detect $\\sf N$ photons, then the precision with which we can measure relative flux changes is $\\sf 1/\\sqrt{N}$. For example, if we collect $\\sf 1~Gigaphoton = 10^9~photons$, then we might hope to measure brightness variations at the level of $\\sf 10^{-9/2} = 32~ppm$.</li> <li>Transit Depth shows the fraction of starlight blocked when the planet passes in front of its star. This signal is quantified simply as the ratio of the planet's and star's projected areas $$\\sf transit~depth \\approx \\left(\\frac{R_p}{R_\\star}\\right)^2$$  and matters for our ability to detect the mere existence of the planet. Unsurpisingly, JWST has the precision to detect an individual transit for the vast majority of transiting exoplanets!</li> <li>Transit Depth of 1 Scale Height shows the natural scale for transmission spectroscopy, representing the fraction of light blocked by an annulus surrounding the planet's limb with a thickness of one atmospheric scale height. The signal scale is approximated by imagining that across different wavelengths 1 scale height's worth of atmosphere might switch from being totally transparent to totally opaque, so we should care about the ratio of the projected area of the atmospheric annulus to the star's area $$\\sf transmission~depth \\approx \\frac{2R_p H}{R_\\star^2}$$ where $\\sf H = k_{B}T/\\mu mg$ is the atmospheric scale height, with $\\sf k_{B}$ as the Boltzmann constant, $\\sf T$ as the temperature approximated to be the zero-albedo equilibrium temperature, $\\sf m$ as the mean molecular mass of the atmosphere approximated as the mass of 2.3 protons which is reasonable for solar-composition atmosphere, $\\sf g$ as the surface gravity estimated from the planet's radius and mass. The assumption of a hydrogen-dominated atmosphere definitely fails for rocky planets with secondary atmospheres and higher mean molecular weights, and the requirement of a surface gravity means that only planets with measured masses and radii can be included on this plot.</li> <li>Thermal Emission Eclipse Depth shows the fraction of total system light that disappears when the thermal emission from the planet itself disappears behind the star, half an orbit away from when it transits. This signal is approximated here as the ratio of the planet's thermal luminosity to that of its star $$\\sf thermal~eclipse~depth \\approx \\left(\\frac{R_p}{R_\\star}\\right)^2 \\times \\frac{B_\\lambda(T_{p})}{B_\\lambda(T_{\\star})} $$ where we're assuming (!) simple Planck thermal emission spectra $\\sf B_\\lambda$ for the planet's equilibrium temperature $\\sf T_{eq}$ (assuming zero albedo and that incoming stellar radiation gets uniformly redistributed over the planet's sphere). Basically all hot Jupiters are detectable in thermal emission with JWST.</li> <li>Reflected Light Eclipse Depth shows the fraction of total system light from the planet's dayside disappears behind the star, half an orbit away from when it transits. This signal is approximated here as the ratio of the planet's reflected luminosity to that of its star $$\\sf reflected~eclipse~depth \\approx \\frac{A_\\lambda}{4} \\left(\\frac{R_p}{R_\\star}\\right)^2 \\left(\\frac{R_\\star}{a}\\right)^2 $$ where $\\sf A_\\lambda$ is the planet's albedo (assumed here to be $\\sf A\\lambda = 0.1$) and $\\sf a$ is the planet's semimajor axis. Reflected light is hard to detect, even with JWST!</li> </ul> <p>In many panels, symbol areas are proportional to the $\\sf signal/noise$ ratio, and the diagonal line in the top panel shows where $\\sf signal = noise$; planets farther above the line and with bigger dots are easier to observe!</p> <p>The horizontal axes are shared along each column:</p> <ul> <li>Bolometric Flux Received mostly serves as a colorbar legend. In all panels, planets are colored according to the flux their receive from their stars, which approximately sets their equilibrium temperature. Looking back over the previous columns, it's clear that for most atmosphere observables, hotter planets are easier to observe. There's an interesting trend when comparing planet flux received to stellar brightness: cooler planets tend to have been discovered around cooler stars, so at a fixed distance from Earth the systems hosting cooler planets will tend to be fainter.</li> <li>Distance shows the distance from Earth to the system. Other properties being equal, closer systems are brighter! The closest transiting Jupiter-size planets tend to be farther away than the closest transiting Earth-size planets; that's because smaller close-in planets are intrinsically more common and astronomers have done a pretty good job of detecting many nearby transiting planets.</li> <li>Right Ascension shows what's overhead at midnight at different times of the year. Since it's hard for any telescope to observe too close to the Sun, whether observing from the ground or from space, the right ascension matters quite a bit for when during the year a target might be observable.</li> </ul> In\u00a0[4]: Copied! <pre>import astropy.units as u\n\nvi.ObservableGallery(\n    telescope_name=\"APO\",\n    wavelength=0.5 * u.micron,\n    efficiency=0.1,\n    R=10,\n).build([e,s])\n</pre> import astropy.units as u  vi.ObservableGallery(     telescope_name=\"APO\",     wavelength=0.5 * u.micron,     efficiency=0.1,     R=10, ).build([e,s]) <p>Plenty of transiting planets exist where the potential size of a transmission spectroscopy signal is, in principle, larger than the photon noise limit expected from APO. The rough noise estimate used here doesn't include contributions from atmospheric scintillation or comparison star, so these might not all actually be observable, but it's good to know it's at least worth exploring!</p>"},{"location":"observing/#observing","title":"Observing\u00b6","text":"<p>Some exoplanets are easier to observe than others. <code>exoatlas</code> can be used to explore how exoplanet signals compare to the noise potentially achievable by any particular telescope. Let's explore some built-in visualizations for understanding this signal-to-noise comparison. (Be careful, this page is a little rough right now. Sorry!)</p>"},{"location":"observing/#what-is-observable","title":"What is observable?\u00b6","text":"<p>Let's create a <code>Population</code> of all known transiting exoplanets, and one with the eight basic Solar System planets.</p>"},{"location":"observing/#what-about-other-telescopes","title":"What about other telescopes?\u00b6","text":"<p>We can supply some keyword arguments to <code>observable_summary</code> to consider other telescopes besides the beautiful and terrible JWST. For example, let's look at transmission spectroscopy in the optical with the Apache Point Observatory 3.5m telescope:</p>"},{"location":"populations/","title":"Populations","text":"In\u00a0[1]: Copied! <pre>import exoatlas as ea\nimport astropy.units as u\n\nea.version()\n</pre> import exoatlas as ea import astropy.units as u  ea.version() Out[1]: <pre>'0.6.1'</pre> In\u00a0[2]: Copied! <pre>pop = ea.TransitingExoplanets()\n</pre> pop = ea.TransitingExoplanets() In\u00a0[3]: Copied! <pre>pop.standard\n</pre> pop.standard Out[3]: QTable length=4406 namehostnamelettergaia_idnumber_of_starsnumber_of_planetsdiscovery_methoddiscovery_yeardiscovery_publicationdiscovery_facilityradecpmrapmdecsystemic_rv_upper_limitsystemic_rvsystemic_rv_uncertainty_uppersystemic_rv_uncertainty_lowersystemic_rv_referencedistancedistance_uncertainty_upperdistance_uncertainty_lowerdistance_referencedetected_in_rvdetected_in_pulsardetected_in_pulsation_timingdetected_in_transitdetected_in_astrometrydetected_in_orbital_brightness_modulationsdetected_in_microlensingdetected_in_eclipse_timing_variationsdetected_in_imagingdetected_in_disk_kinematicsis_controversialshows_ttvstellar_spectral_typestellar_teff_upper_limitstellar_teffstellar_teff_uncertainty_upperstellar_teff_uncertainty_lowerstellar_teff_referencestellar_radiusstellar_radius_uncertainty_upperstellar_radius_uncertainty_lowerstellar_radius_referencestellar_massstellar_mass_uncertainty_upperstellar_mass_uncertainty_lowerstellar_mass_referencestellar_age_lower_limitstellar_age_upper_limitstellar_agestellar_age_uncertainty_upperstellar_age_uncertainty_lowerstellar_age_referencestellar_metallicity_lower_limitstellar_metallicity_upper_limitstellar_metallicitystellar_metallicity_uncertainty_upperstellar_metallicity_uncertainty_lowerstellar_metallicity_referencestellar_luminositystellar_luminosity_uncertainty_upperstellar_luminosity_uncertainty_lowerstellar_luminosity_referencestellar_logg_lower_limitstellar_loggstellar_logg_uncertainty_upperstellar_logg_uncertainty_lowerstellar_logg_referencestellar_densitystellar_density_uncertainty_upperstellar_density_uncertainty_lowerstellar_density_referencestellar_vsini_lower_limitstellar_vsini_upper_limitstellar_vsinistellar_vsini_uncertainty_upperstellar_vsini_uncertainty_lowerstellar_vsini_referencestellar_rotation_period_lower_limitstellar_rotation_period_upper_limitstellar_rotation_periodstellar_rotation_period_uncertainty_upperstellar_rotation_period_uncertainty_lowerstellar_rotation_period_referencemagnitude_umagnitude_u_uncertainty_uppermagnitude_u_uncertainty_lowermagnitude_u_referencemagnitude_gmagnitude_g_uncertainty_uppermagnitude_g_uncertainty_lowermagnitude_g_referencemagnitude_rmagnitude_r_uncertainty_uppermagnitude_r_uncertainty_lowermagnitude_r_referencemagnitude_imagnitude_i_uncertainty_uppermagnitude_i_uncertainty_lowermagnitude_i_referencemagnitude_zmagnitude_z_uncertainty_uppermagnitude_z_uncertainty_lowermagnitude_z_referencemagnitude_Vmagnitude_V_uncertainty_uppermagnitude_V_uncertainty_lowermagnitude_V_referencemagnitude_Bmagnitude_B_uncertainty_uppermagnitude_B_uncertainty_lowermagnitude_B_referencemagnitude_ICmagnitude_IC_uncertainty_uppermagnitude_IC_uncertainty_lowermagnitude_IC_referencemagnitude_Jmagnitude_J_uncertainty_uppermagnitude_J_uncertainty_lowermagnitude_J_referencemagnitude_Hmagnitude_H_uncertainty_uppermagnitude_H_uncertainty_lowermagnitude_H_referencemagnitude_Kmagnitude_K_uncertainty_uppermagnitude_K_uncertainty_lowermagnitude_K_referencemagnitude_W1magnitude_W1_uncertainty_uppermagnitude_W1_uncertainty_lowermagnitude_W1_referencemagnitude_W2magnitude_W2_uncertainty_uppermagnitude_W2_uncertainty_lowermagnitude_W2_referencemagnitude_W3magnitude_W3_uncertainty_uppermagnitude_W3_uncertainty_lowermagnitude_W3_referencemagnitude_W4magnitude_W4_uncertainty_uppermagnitude_W4_uncertainty_lowermagnitude_W4_referencemagnitude_gaiamagnitude_gaia_uncertainty_uppermagnitude_gaia_uncertainty_lowermagnitude_gaia_referencemagnitude_Tmagnitude_T_uncertainty_uppermagnitude_T_uncertainty_lowermagnitude_T_referencemagnitude_kepmagnitude_kep_uncertainty_uppermagnitude_kep_uncertainty_lowermagnitude_kep_referenceperiod_lower_limitperiod_upper_limitperiodperiod_uncertainty_upperperiod_uncertainty_lowerperiod_referencesemimajoraxis_lower_limitsemimajoraxissemimajoraxis_uncertainty_uppersemimajoraxis_uncertainty_lowersemimajoraxis_referenceeccentricity_lower_limiteccentricity_upper_limiteccentricityeccentricity_uncertainty_uppereccentricity_uncertainty_lowereccentricity_referenceargument_of_periastronargument_of_periastron_uncertainty_upperargument_of_periastron_uncertainty_lowerargument_of_periastron_referenceinclination_lower_limitinclination_upper_limitinclinationinclination_uncertainty_upperinclination_uncertainty_lowerinclination_referenceradius_lower_limitradiusradius_uncertainty_upperradius_uncertainty_lowerradius_referencemass_lower_limitmass_upper_limitmassmass_uncertainty_uppermass_uncertainty_lowermass_referencedensity_lower_limitdensity_upper_limitdensitydensity_uncertainty_upperdensity_uncertainty_lowerdensity_referencenumber_of_transmission_measurementsnumber_of_emission_measurementstransit_midpointtransit_midpoint_uncertainty_uppertransit_midpoint_uncertainty_lowertransit_midpoint_referencetransit_duration_upper_limittransit_durationtransit_duration_uncertainty_uppertransit_duration_uncertainty_lowertransit_duration_referencetransit_scaled_radiustransit_scaled_radius_uncertainty_uppertransit_scaled_radius_uncertainty_lowertransit_scaled_radius_referencetransit_depth_lower_limittransit_depthtransit_depth_uncertainty_uppertransit_depth_uncertainty_lowertransit_depth_referencetransit_scaled_semimajoraxis_lower_limittransit_scaled_semimajoraxistransit_scaled_semimajoraxis_uncertainty_uppertransit_scaled_semimajoraxis_uncertainty_lowertransit_scaled_semimajoraxis_referencetransit_impact_parameter_lower_limittransit_impact_parameter_upper_limittransit_impact_parametertransit_impact_parameter_uncertainty_uppertransit_impact_parameter_uncertainty_lowertransit_impact_parameter_referencerv_semiamplitude_lower_limitrv_semiamplitude_upper_limitrv_semiamplituderv_semiamplitude_uncertainty_upperrv_semiamplitude_uncertainty_lowerrv_semiamplitude_referencemsini_lower_limitmsini_upper_limitmsinimsini_uncertainty_uppermsini_uncertainty_lowermsini_referenceprojected_obliquity_upper_limitprojected_obliquityprojected_obliquity_uncertainty_upperprojected_obliquity_uncertainty_lowerprojected_obliquity_referenceobliquity_lower_limitobliquity_upper_limitobliquityobliquity_uncertainty_upperobliquity_uncertainty_lowerobliquity_referencetidynametidyhostname degdegmas / yrmas / yrkm / skm / skm / spcpcpcKKKsolRadsolRadsolRadsolMasssolMasssolMassGyrGyrGyrsolLumsolLumsolLummagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagmagdddAUAUAUdegdegdegdegdegdegearthRadearthRadearthRadearthMassearthMassearthMassg / cm3g / cm3g / cm3dddhhhm / sm / sm / searthMassearthMassearthMassdegdegdegdegdegdeg str29str27str1str28int64int64str29int64str42str60float64float64float64float64float64float64float64float64str40float64float64float64str33int64int64int64int64int64int64int64int64int64int64int64int64str16float64float64float64float64str40float64float64float64str40float64float64float64str40float64float64float64float64float64str42float64float64float64float64float64str40float64float64float64str42float64float64float64float64str40float64float64float64str31float64float64float64float64float64str40float64float64float64float64float64str40float64float64float64str33float64float64float64str33float64float64float64str33float64float64float64str33float64float64float64str33float64float64float64str36float64float64float64str36float64float64float64str33float64float64float64str33float64float64float64str33float64float64float64str33float64float64float64str33float64float64float64str33float64float64float64str33float64float64float64str33float64float64float64str33float64float64float64str33float64float64float64str33float64float64float64float64float64str40float64float64float64float64str40float64float64float64float64float64str40float64float64float64str40float64float64float64float64float64str40float64float64float64float64str40float64float64float64float64float64str40float64float64float64float64float64str40int64int64float64float64float64str40float64float64float64float64str40float64float64float64str42float64float64float64float64str40float64float64float64float64str40float64float64float64float64float64str40float64float64float64float64float64str40float64float64float64float64float64str42float64float64float64float64str42float64float64float64float64float64str25str24str22 55 Cnc e55 CnceGaia DR2 70496703709094668825Radial Velocity2004McArthur et al. 2004McDonald Observatory133.146837328.3298154-485.872-233.651nan27.410.0-0.0Bourrier &amp;amp H&amp;eacutebrard 201412.58550.0124-0.0123TICv8100100000000G8 Vnan5172.018.0-18.0Dai et al. 20190.940.01-0.01Bourrier et al. 20180.910.02-0.02Bourrier et al. 2018nannan10.22.5-2.5von Braun et al. 2011nannan0.350.1-0.1Bourrier et al. 20180.63533093185174370.0175548423935980960.014629035327998412TICv8nan4.430.02-0.02Bourrier et al. 20181.52120.00705-0.00705Crida et al. 2018nan1.23nannannanBourrier et al. 2018nannan38.80.05-0.05Bourrier et al. 2018nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv85.950840.023-0.023TICv86.8160.019-0.019TICv8nannannanTICv84.7680.244-0.244TICv84.2650.234-0.234TICv84.0150.036-0.036TICv8nan0.318nanCutri et al. 2014nan0.174nanCutri et al. 2014nan0.015nanCutri et al. 2014nannannanCutri et al. 20145.729730.0008523-0.0008523TICv85.20580.0061-0.0061TICv8nannannanTICv8nannan0.73654741.3e-06-1.4e-06Bourrier et al. 2018nan0.015445e-05-5e-05Bourrier et al. 2018nannan0.050.03-0.03Bourrier et al. 201886.030.7-33.4Bourrier et al. 2018nannan83.590.47-0.44Bourrier et al. 2018nan1.8750.029-0.029Bourrier et al. 2018nannan7.990.32-0.33Bourrier et al. 2018nannan6.660.43-0.4Bourrier et al. 20184192457063.20960.0006-0.0004Bourrier et al. 2018nan1.57322080.0293747-0.0293747ExoFOP-TESS TOI0.01820.0002-0.0002Bourrier et al. 2018nan0.000384670000000000044.19e-06-4.19e-06ExoFOP-TESS TOInan3.520.01-0.01Bourrier et al. 2018nannan0.390.03-0.03Bourrier et al. 2018nannan6.020.24-0.23Bourrier et al. 2018nannan9.37593800650.4449597698-0.4449597698Rosenthal et al. 2021nan72.412.7-11.5Bourrier &amp;amp H&amp;eacutebrard 2014nannannannannan--55cnce55cnc AU Mic bAU MicbGaia DR2 679404765272920102413Transit2020Plavchan et al. 2020Transiting Exoplanet Survey Satellite (TESS)311.2911369-31.34245281.424-359.895nan-6.310.29-0.29Gaia DR29.72210.004625-0.004625TICv8100100000001M1nan3678.090.0-88.0Wittrock et al. 20230.740.02-0.02Wittrock et al. 20230.510.03-0.03Wittrock et al. 2023nannan0.020.003-0.002Wittrock et al. 2023nannan0.230.24-0.3Wittrock et al. 20230.091622049012199960.0103374106480080120.010337410648008012Wittrock et al. 2023nan4.40.03-0.03Wittrock et al. 20231.750.14-0.16Wittrock et al. 2023nannan8.50.2-0.2Donati et al. 2023nannan4.860.0-0.0Donati et al. 2023nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv88.810.1-0.1TICv810.2090.036-0.036TICv8nannannanPlavchan et al. 20205.4360.017-0.017TICv84.8310.016-0.016TICv84.5290.02-0.02TICv8nan0.277nanCutri et al. 2014nan0.166nanCutri et al. 2014nan0.014nanCutri et al. 2014nannannanCutri et al. 20147.840380.000731-0.000731TICv86.7550.032-0.032TICv8nannannanTICv8nannan8.463086e-05-6e-05Wittrock et al. 2023nan0.06490.0012-0.0012Wittrock et al. 2023nannan0.005770.00101-0.00101Wittrock et al. 202388.43040.0578-0.0578Wittrock et al. 2023nannan89.5790.376-0.376Wittrock et al. 2023nan3.9570.146-0.146Wittrock et al. 2023nannan20.121.57-1.72Cale et al. 2021nannan1.320.19-0.2Cale et al. 2021002458525.041090.00052-0.00051Wittrock et al. 2023nan3.49270.0074-0.0067Wittrock et al. 20230.04880.001-0.001Wittrock et al. 2023nan0.0023790.0001-9.900000000000001e-05Wittrock et al. 2023nan18.790.5-0.59Wittrock et al. 2023nannan0.1340.096-0.089Wittrock et al. 2023nannan10.230.88-0.91Cale et al. 2021nan57.2094nannannanPlavchan et al. 2020nan-4.76.8-6.4Hirano et al. 2020nannannannannan--aumicbaumic AU Mic cAU MiccGaia DR2 679404765272920102413Transit2021Martioli et al. 2021Transiting Exoplanet Survey Satellite (TESS)311.2911369-31.34245281.424-359.895nan-6.310.29-0.29Gaia DR29.72210.004625-0.004625TICv8100100000000M1nan3678.090.0-88.0Wittrock et al. 20230.740.02-0.02Wittrock et al. 20230.510.03-0.03Wittrock et al. 2023nannan0.020.003-0.002Wittrock et al. 2023nannan0.230.24-0.3Wittrock et al. 20230.091622049012199960.0103374106480080120.010337410648008012Wittrock et al. 2023nan4.40.03-0.03Wittrock et al. 20231.750.14-0.16Wittrock et al. 2023nannan8.50.2-0.2Donati et al. 2023nannan4.860.0-0.0Donati et al. 2023nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv88.810.1-0.1TICv810.2090.036-0.036TICv8nannannanPlavchan et al. 20205.4360.017-0.017TICv84.8310.016-0.016TICv84.5290.02-0.02TICv8nan0.277nanCutri et al. 2014nan0.166nanCutri et al. 2014nan0.014nanCutri et al. 2014nannannanCutri et al. 20147.840380.000731-0.000731TICv86.7550.032-0.032TICv8nannannanTICv8nannan18.859698e-05-8e-05Wittrock et al. 2023nan0.11080.002-0.002Wittrock et al. 2023nannan0.003380.00164-0.00164Wittrock et al. 2023223.28441.6836-1.6836Wittrock et al. 2023nannan89.2270.217-0.217Wittrock et al. 2023nan2.5220.247-0.247Wittrock et al. 2023nannan9.62.07-2.31Cale et al. 2021nannan1.220.26-0.29Cale et al. 2021002458342.2240.0019-0.0018Wittrock et al. 2023nan4.2360.029-0.029Wittrock et al. 20230.03110.0028-0.0028Wittrock et al. 2023nan0.000970.00017999999999999998-0.00017Wittrock et al. 2023nan32.050.86-1.0Wittrock et al. 2023nannan0.30.13-0.19Wittrock et al. 2023nannan3.680.87-0.86Cale et al. 2021nannannannannan--nannannannan--nannannannannan--aumiccaumic BD+20 594 bBD+20 594bGaia DR2 5820093432631513611Transit2016Espinoza et al. 2016K253.651123120.599020536.5714-51.3647nan-20.340.0-0.0Espinoza et al. 2016179.4611.257-1.24TICv8100100000000Gnan5766.099.0-99.0Stassun et al. 20171.080.06-0.06Stassun et al. 20171.670.4-0.4Stassun et al. 2017nannan3.341.95-1.49Espinoza et al. 2016nannannannannanStassun et al. 20170.87902251683088430.137633641768941360.12953754519429775Espinoza et al. 2016nan4.50.08-0.08Stassun et al. 20171.890.34-0.34Stassun et al. 2017nannan3.30.31-0.31Espinoza et al. 2016nannannannannan--nannannanTICv8nan0.039nanEspinoza et al. 2016nan0.05nanEspinoza et al. 2016nan0.54nanEspinoza et al. 2016nannannanTICv810.8490.012-0.012TICv811.7650.161-0.161TICv8nannannanTICv89.7700010.022-0.022TICv89.4320.022-0.022TICv89.3680.018-0.018TICv89.310.024-0.024TICv89.3440.02-0.02TICv89.3320.038-0.038TICv88.9760.527-0.527TICv810.86440.000249-0.000249TICv810.40210.006-0.006TICv8nannannanTICv8nannan41.68550.003-0.003Stassun et al. 2017nan0.2410.019-0.017Espinoza et al. 2016nannannannannanStassun et al. 2017nannannan--nannan89.550.16-0.16Stassun et al. 2017nan2.5780.112-0.112Stassun et al. 2017nannan22.24819.5349-9.5349Stassun et al. 2017nannan7.893.4-3.1Espinoza et al. 2016002457068.528770.002801-0.002798Mayo et al. 2018nannannannan--0.022040.00058-0.00057Espinoza et al. 2016nan0.000492.5e-05-2.5e-05Stassun et al. 2017nan55.83.3-3.3Stassun et al. 2017nannannannannan--nannan3.11.1-1.1Stassun et al. 2017nannannannannan--nannannannan--nannannannannan--bd20594bbd20594 BD-14 3065 bBD-14 3065 AbGaia DR2 375187737443510272031Transit2024&amp;Scaron;ubjak et al. 2024Transiting Exoplanet Survey Satellite (TESS)153.6696689-15.6428372-5.607727.07846nannannannan--589.42316.599-15.729TICv8100100000000N/Anan6935.090.0-90.0&amp;Scaronubjak et al. 20242.350.08-0.08&amp;Scaronubjak et al. 20241.410.05-0.05&amp;Scaronubjak et al. 2024nannan2.240.26-0.26&amp;Scaronubjak et al. 2024nannan-0.340.05-0.05&amp;Scaronubjak et al. 202411.4815362149688290.79311642399775520.7931164239977552&amp;Scaronubjak et al. 2024nan3.850.03-0.03&amp;Scaronubjak et al. 20240.2230.013-0.014&amp;Scaronubjak et al. 2024nannan22.03.0-3.0&amp;Scaronubjak et al. 2024nannan4.30.2-0.2&amp;Scaronubjak et al. 2024nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv811.10.013-0.013TICv811.4840.18-0.18TICv8nannannanTICv810.1430.026-0.026TICv89.9750.026-0.026TICv89.9320.026-0.026TICv89.8420.023-0.023TICv89.8660.02-0.02TICv89.8520.049-0.049TICv89.0620.536-0.536TICv810.910.001617-0.001617TICv810.63110.0081-0.0081TICv8nannannanTICv8nannan4.28897315.2e-06-5.2e-06&amp;Scaronubjak et al. 2024nan0.06560.0026-0.0026&amp;Scaronubjak et al. 2024nannan0.0660.0098-0.011&amp;Scaronubjak et al. 202454.06.0-9.1&amp;Scaronubjak et al. 2024nannan80.780.24-0.3&amp;Scaronubjak et al. 2024nan21.591.05-1.05&amp;Scaronubjak et al. 2024nannan3932.0290.0-280.0&amp;Scaronubjak et al. 2024nannan2.150.53-0.48&amp;Scaronubjak et al. 2024002459313.485780.00076-0.00076&amp;Scaronubjak et al. 2024nan3.0860.041-0.041&amp;Scaronubjak et al. 20240.08430.0023-0.0022&amp;Scaronubjak et al. 2024nan0.006490.00023-0.0002&amp;Scaronubjak et al. 2024nan6.010.12-0.13&amp;Scaronubjak et al. 2024nannan0.90990.0092-0.0079&amp;Scaronubjak et al. 2024nannan1210.071.0-71.0&amp;Scaronubjak et al. 2024nannannannannan--nannannannan--nannannannannan--bd143065bbd143065a CoRoT-1 bCoRoT-1bGaia DR2 310550788613079244811Transit2008Barge et al. 2008CoRoT102.0798591-3.1021394-6.014620.54713nan23.350.01-0.01Barge et al. 2008787.90923.491-23.491TICv8100101000000G0 Vnan5950.0150.0-150.0Barge et al. 20081.110.05-0.05Barge et al. 20080.950.15-0.15Barge et al. 2008nannan1.60.5-0.5Bonomo et al. 2017nannan-0.30.25-0.25Barge et al. 20081.98609491735737140.132621423949371430.14176772904932808Gaia DR2nan4.250.3-0.3Barge et al. 20080.930.027-0.027Southworth 2011nannan5.21.0-1.0Barge et al. 2008nannannannannan--nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv813.6230.114-0.114TICv814.1580.053-0.053TICv8nannannanTICv812.4620.029-0.029TICv812.2180.026-0.026TICv812.1490.027-0.027TICv812.0980.023-0.023TICv812.1360.023-0.023TICv812.290.338-0.338TICv8nannannanTICv813.4570.000477-0.000477TICv813.05010.0165-0.0165TICv8nannannanTICv8nannan1.50895576.4e-06-6.4e-06Barge et al. 2008nan0.027520.00022-0.00023Bonomo et al. 2017nannannannannanBarge et al. 2008nannannan--nannan85.10.5-0.5Barge et al. 2008nan16.70.9-0.9Barge et al. 2008nannan327.3538.14-38.14Barge et al. 2008nannan0.380.05-0.05Barge et al. 2008672454159.45320.0001-0.0001Barge et al. 2008nan2.3730.245-0.245ExoFOP-TESS TOI0.13880.0021-0.0021Barge et al. 2008nan0.01926540.00058737-0.0005785499999999999Barge et al. 2008nan4.920.08-0.08Barge et al. 2008nannan0.350.08-0.08Pont et al. 2010nannan188.011.0-11.0Barge et al. 2008nannannannannan--nan77.011.0-11.0Pont et al. 2010nannannannannan--corot1bcorot1 CoRoT-10 bCoRoT-10bGaia DR2 426375292112831961611Transit2010Bonomo et al. 2010CoRoT291.06368130.7460143-3.19635-22.735nan15.330.01-0.01Bonomo et al. 2010338.3863.9865-3.9865TICv8100100000000K1 Vnan4921.025.0-25.0Tsantaki et al. 20140.790.05-0.05Bonomo et al. 20170.90.04-0.04Southworth 2011nan3.0nannannanBonomo et al. 2010nannan0.260.07-0.07Bonomo et al. 20100.187931681680326840.0051927442648610740.005192744264861074Gaia DR2nan4.650.1-0.1Bonomo et al. 20103.320.7-0.7Bonomo et al. 2010nannan2.00.5-0.5Bonomo et al. 2017nannannannannan--nannannanTICv8nannannanTICv8nan0.03nanBonomo et al. 2010nan0.03nanBonomo et al. 2010nannannanTICv815.2930.137-0.137TICv817.3440.166-0.166TICv8nannannanTICv812.5270.025-0.025TICv811.9290.028-0.028TICv811.7820.021-0.021TICv811.640.022-0.022TICv811.7520.023-0.023TICv811.3960.213-0.213TICv8nannannanTICv814.66450.000329-0.000329TICv813.82150.006-0.006TICv8nannannanTICv8nannan13.24060.0002-0.0002Bonomo et al. 2010nan0.10550.0021-0.0021Bonomo et al. 2010nannan0.530.04-0.04Bonomo et al. 2010218.96.4-6.4Bonomo et al. 2010nannan88.550.2-0.2Bonomo et al. 2010nan10.870.78-0.78Bonomo et al. 2010nannan874.050.85-50.85Bonomo et al. 2010nannan3.70.83-0.83Bonomo et al. 2010002454273.34360.0012-0.0012Bonomo et al. 2010nan2.980.06-0.06Bonomo et al. 20100.12690.0038-0.0038Bonomo et al. 2010nan0.01610360.0009788800000000001-0.00095Bonomo et al. 2010nan31.332.15-2.15Bonomo et al. 2010nannan0.850.03-0.03Bonomo et al. 2010nannan301.010.0-10.0Bonomo et al. 2010nannannannannan--nannannannan--nannannannannan--corot10bcorot10 CoRoT-11 bCoRoT-11bGaia DR2 428551129417230950411Transit2010Gandolfi et al. 2010CoRoT280.68729985.93765861.91873-5.24175nan-1.340.04-0.04Gandolfi et al. 2012655.03724.947-23.209TICv8100100000000F6 Vnan6440.0120.0-120.0Gandolfi et al. 20101.370.03-0.03Gandolfi et al. 20101.270.05-0.05Gandolfi et al. 2010nannan2.01.0-1.0Gandolfi et al. 2010nannan-0.030.08-0.08Gandolfi et al. 20102.38781128291317750.126457189293134040.1319553279580529Gaia DR2nan4.220.23-0.23Gandolfi et al. 20100.690.02-0.02Gandolfi et al. 2010nannan40.05.0-5.0Gandolfi et al. 2010nannannannannan--nannannanTICv8nannannanTICv8nan0.019nanGandolfi et al. 2010nan0.053nanGandolfi et al. 2010nannannanTICv812.8970.114-0.114TICv813.5290.029-0.029TICv8nannannanTICv811.5890.021-0.021TICv811.4160.029-0.029TICv811.2480.022-0.022TICv811.1730.022-0.022TICv811.2650.021-0.021TICv811.470.206-0.206TICv8nannannanTICv812.8410.000336-0.000336TICv812.4190.0216-0.0216TICv8nannannanTICv8nannan2.994331.1e-05-1.1e-05Gandolfi et al. 2010nan0.04360.005-0.005Gandolfi et al. 2010nannannannannanGandolfi et al. 2010nannannan--nannan83.170.15-0.15Gandolfi et al. 2010nan16.030.34-0.34Gandolfi et al. 2010nannan740.51108.06-108.06Gandolfi et al. 2010nannan0.990.15-0.15Gandolfi et al. 2010002454597.6790.0003-0.0003Gandolfi et al. 2010nan2.50090.0144-0.0144Gandolfi et al. 20100.1070.0005-0.0005Gandolfi et al. 2010nan0.0114490.00010725-0.00010675Gandolfi et al. 2010nan6.890.08-0.08Gandolfi et al. 2010nannan0.8180.008-0.008Gandolfi et al. 2010nannan280.040.0-40.0Gandolfi et al. 2010nannannannannan--nan0.12.6-2.6Gandolfi et al. 2012nannannannannan--corot11bcorot11 CoRoT-12 bCoRoT-12bGaia DR2 310725559852640691211Transit2010Gillon et al. 2010CoRoT100.7656871-1.29644371.69419-3.47492nannannannan--1126.3755.745-55.745TICv8100100000000N/Anan5675.080.0-80.0Bonomo et al. 20171.050.04-0.04Southworth 20111.080.08-0.07Bonomo et al. 2017nannan6.33.1-3.1Gillon et al. 2010nannan0.160.1-0.1Gillon et al. 20101.17489755493952950.027053015957989140.02705301595798914Raetz et al. 2019nan4.380.07-0.06Gillon et al. 20101.080.28-0.21Gillon et al. 2010nannan1.01.0-1.0Bonomo et al. 2017nannannannannan--nannannanTICv8nannannanTICv8nan0.04nanGillon et al. 2010nan0.069nanGillon et al. 2010nannannanTICv815.5880.183-0.183TICv816.4080.056-0.056TICv8nannannanTICv814.0240.032-0.032TICv813.630.031-0.031TICv813.5570.042-0.042TICv813.470.025-0.025TICv813.470.033-0.033TICv8nannannanTICv8nannannanTICv815.34530.00077-0.00077TICv814.79710.0143-0.0143TICv8nannannanTICv8nannan2.8280421.3e-05-1.3e-05Gillon et al. 2010nan0.040160.00093-0.00092Gillon et al. 2010nannan0.070.063-0.042Gillon et al. 2010105.090.0-27.0Gillon et al. 2010nannan85.480.72-0.77Gillon et al. 2010nan16.141.46-1.46Gillon et al. 2010nannan291.43822.247-20.658Gillon et al. 2010nannan0.4110.129-0.094Gillon et al. 2010002454398.627070.00036-0.00036Gillon et al. 2010nan2.574240.02136-0.0216Gillon et al. 20100.13140.0015-0.0015Raetz et al. 2019nan0.017440.00039-0.0004Gillon et al. 2010nan8.09720.2362-0.2232Southworth 2011nannan0.5730.027-0.03Gillon et al. 2010nannan125.58.0-7.5Gillon et al. 2010nannannannannan--nannannannan--nannannannannan--corot12bcorotolf 503 bWolf 503bGaia DR2 362032520621772032011Transit2018Peterson et al. 2018K2206.8461979-6.1393369-342.833-573.134nan-46.830.02-0.02Peterson et al. 201844.5260.0964-0.0961TICv8100100000000K3.5 Vnan4716.060.0-60.0Bonomo et al. 20230.690.02-0.02Bonomo et al. 20230.690.02-0.02Bonomo et al. 2023nannan11.02.0-2.0Bonomo et al. 2023nannan-0.470.08-0.08Bonomo et al. 20230.210862814993328930.00679741404258560850.007282943617056008Polanski et al. 2021nan4.620.02-0.01Polanski et al. 20212.170.12-0.12Polanski et al. 2021nannannannannan--nannannannannan--nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv810.270.03-0.03TICv811.2760.037-0.037TICv8nan0.025nanWeis 19968.3240.019-0.019TICv87.7740.051-0.051TICv87.6170.023-0.023TICv8nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv89.898160.000337-0.000337TICv89.24930.006-0.006TICv8nannannanTICv8nannan6.001272.1e-05-2.1e-05Bonomo et al. 2023nan0.057120.00063-0.00045Bonomo et al. 2023nannan0.4090.085-0.085Bonomo et al. 2023112.010.0-10.0Polanski et al. 2021nannan89.870.13-0.13Bonomo et al. 2023nan2.0430.069-0.069Bonomo et al. 2023nannan6.270.85-0.84Bonomo et al. 2023nannan4.030.72-0.64Bonomo et al. 2023002458191.361450.00011-0.00011Bonomo et al. 2023nan1.3210.051-0.039Peterson et al. 20180.026940.00026-0.00026Peterson et al. 2018nannannannan--nannannannan--nannan0.650.06-0.06Polanski et al. 2021nannan3.110.39-0.39Bonomo et al. 2023nannannannannan--nannannannan--nannannannannan--wolf503bwolf503 XO-1 bXO-1bGaia DR2 131670891850535052811Transit2006McCullough et al. 2006XO240.549274528.1696248-17.422114.8202nan2.560.48-0.48Gaia DR2163.5530.622-0.617TICv8100100000000G1 Vnan5750.075.0-75.0Stassun et al. 20170.880.05-0.05Stassun et al. 20170.880.19-0.19Stassun et al. 2017nannan0.92.5-1.2Southworth 2010nannannannannanStassun et al. 20170.82035154432981830.018889292369884840.026445009317838775TICv8nan4.510.02-0.02Stassun et al. 20171.790.22-0.22Stassun et al. 2017nannan1.110.067-0.067Bonomo et al. 2017nannannannannan--14.83650.0076807-0.0076807TICv811.78440.0007765-0.0007765TICv811.04950.000557-0.000557TICv810.86850.000908-0.000908TICv811.31440.0022352-0.0022352TICv811.2510.008-0.008TICv811.8780.122-0.122TICv8nan0.03nanMcCullough et al. 20069.9390.022-0.022TICv89.6010.017-0.017TICv89.5270.015-0.015TICv89.4950.023-0.023TICv89.5180.02-0.02TICv89.5070.041-0.041TICv89.2480.522-0.522TICv811.0040.000405-0.000405TICv810.54840.0061-0.0061TICv8nannannanTICv8nannan3.941532.7e-05-2.7e-05Stassun et al. 2017nan0.04880.0005-0.0005McCullough et al. 2006nannannannannanStassun et al. 2017nannannan--nannan88.810.5-0.5Stassun et al. 2017nan12.7780.785-0.785Stassun et al. 2017nannan263.798941.3179-41.3179Stassun et al. 2017nannan0.640.05-0.05Burke et al. 2010212455385.519785e-05-5e-05Kokori et al. 2022nan2.97120.0072-0.0072Burke et al. 20100.13260.0004-0.0005Torres et al. 2008nan0.0180000000000000020.00012-0.00012Stassun et al. 2017nan11.370.47-0.47Stassun et al. 2017nannan0.240.045-0.14Torres et al. 2008nannan116.09.0-9.0Stassun et al. 2017nannannannannan--nannannannan--nannannannannan--xo1bxo1 XO-2 N bXO-2 NbGaia DR2 93434680927871577623Transit2007Burke et al. 2007XO117.026769150.2251472-29.7313-154.272nan46.930.0-0.0Damasso et al. 2015154.2731.459-1.433TICv8100100000000K0 Vnan5340.032.0-32.0Yal&amp;ccedil&amp;#x131nkaya et al. 20240.990.01-0.01Crouzet et al. 2012nannannanCrouzet et al. 2012nannan7.81.2-1.3Bonomo et al. 2017nannan0.430.05-0.05Bonomo et al. 20170.81658237135859250.039485258305332490.028203755932380347TICv8nan4.430.01-0.01Crouzet et al. 20121.410.04-0.039Crouzet et al. 2012nannan1.070.09-0.09Bonomo et al. 2017nannan28.61.3-1.3Bonomo et al. 201714.93530.0067085-0.0067085TICv814.80080.0100065-0.0100065TICv814.49840.0114432-0.0114432TICv810.80060.0004149-0.0004149TICv813.09570.0152614-0.0152614TICv811.2460.011-0.011TICv811.9470.161-0.161TICv8nan0.012nanDamasso et al. 20159.7440.022-0.022TICv89.340.026-0.026TICv89.3080.021-0.021TICv89.240.022-0.022TICv89.310.019-0.019TICv89.2360.038-0.038TICv88.8330.443-0.443TICv810.97180.000514-0.000514TICv810.44670.0061-0.0061TICv8nannannanTICv8nannannannannanCrouzet et al. 2012nannannannanCrouzet et al. 2012nannan0.0280.038-0.022Knutson et al. 2014261.011.0-71.0Knutson et al. 2014nannan88.010.33-0.28Crouzet et al. 2012nan11.1310.135-0.135Crouzet et al. 2012nannan179.891787.94575-7.94575Crouzet et al. 2012nannan0.7150.041-0.04Crouzet et al. 2012512454508.738290.00014-0.00016Crouzet et al. 2012nan2.68390.0066-0.0077Crouzet et al. 20120.103040.00037-0.00037Crouzet et al. 2012nan0.0133630.00013592-0.00013592ExoFOP-TESS TOInannannannan--nannan0.280.036-0.044Crouzet et al. 2012nannan90.170.82-0.82Bonomo et al. 2017nannannannannan--nan7.011.0-11.0Damasso et al. 2015nannan27.012.0-27.0Damasso et al. 2015xo2nbxo2n XO-3 bXO-3bGaia DR2 47065056077734835211Transit2007Johns-Krull et al. 2008XO65.469581457.8172095-2.515654.00264nan-12.030.01-0.01Garai et al. 2017213.0532.724-2.658TICv8100100000000F5Vnan6781.044.0-44.0Tsantaki et al. 20141.410.06-0.06Southworth 20101.210.06-0.06Southworth 2010nannan2.820.58-0.82Bonomo et al. 2017nannannannannanStassun et al. 20174.2657951880159270.068756494867838440.06875649486783844Gaia DR2nan4.220.03-0.03Southworth 20100.220.02-0.02Stassun et al. 2017nannan18.540.17-0.17Bonomo et al. 2017nannannannannan--nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv89.8540.004-0.004TICv810.2740.054-0.054TICv8nannannanTICv89.0130.029-0.029TICv88.8450.018-0.018TICv88.7910.019-0.019TICv88.7540.023-0.023TICv88.7650.02-0.02TICv88.7360.025-0.025TICv88.3720.284-0.284TICv89.738890.000258-0.000258TICv89.4410.006-0.006TICv8nannannanTICv8nannan3.191540.00014-0.00014Stassun et al. 2017nan0.04760.0005-0.0005Johns-Krull et al. 2008nannan0.290.00.0Stassun et al. 2017349.350.67-0.68Bonomo et al. 2017nannan79.321.36-1.36Stassun et al. 2017nan15.8051.345-1.345Stassun et al. 2017nannan2316.9807378.2177-378.2177Stassun et al. 2017nannan8.090.89-0.89Southworth 2010032457417.986780.00013-0.00013Kokori et al. 2023nan2.50320.024-0.0192Tsantaki et al. 20140.088250.00037-0.00037Wong et al. 2014nan0.00890.00078-0.00078Stassun et al. 2017nan4.950.18-0.18Stassun et al. 2017nannan0.6960.028-0.033Patel &amp;amp Espinoza 2022nannan1488.010.0-10.0Stassun et al. 2017nannan4138.12585914203.41018048-203.41018048Johns-Krull et al. 2008nan37.33.7-3.7Winn et al. 2009nannannannannan--xo3bxo3 XO-4 bXO-4bGaia DR2 99029150708873907211Transit2010Southworth 2010Lowell Observatory110.388028558.2681094-16.98945.31035nan1.640.53-0.53Gaia DR2272.6552.914-2.855TICv8100100000000F5 Vnan6397.070.0-70.0Stassun et al. 20171.450.09-0.09Stassun et al. 20171.10.22-0.22Stassun et al. 2017nannan2.10.6-0.6Bonomo et al. 2017nannannannannanStassun et al. 20173.43557947899874660.055374998658971350.05537499865897135Gaia DR2nan4.180.03-0.03Stassun et al. 20170.50.02-0.02Stassun et al. 2017nannan8.80.5-0.5Bonomo et al. 2017nannannannannan--nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv810.8140.008-0.008TICv811.1490.111-0.111TICv8nannannanTICv89.6670.021-0.021TICv89.4760.022-0.022TICv89.4060.023-0.023TICv89.3730.022-0.022TICv89.3980.021-0.021TICv89.3780.04-0.04TICv8nannannanTICv810.51310.000383-0.000383TICv810.16530.0061-0.0061TICv8nannannanTICv8nannan4.125084e-06-4e-06Stassun et al. 2017nan0.055240.00027-0.00028Bonomo et al. 2017nannannannannanStassun et al. 2017240.039.0-160.0Knutson et al. 2014nannan88.80.6-0.6Stassun et al. 2017nan14.0110.897-0.897Stassun et al. 2017nannan451.318660.3877-60.3877Stassun et al. 2017nannan0.830.1-0.088Bonomo et al. 2017012456878.473030.00023-0.00023Kokori et al. 2023nan4.4540.056-0.056ExoFOP-TESS TOI0.08810.0007-0.0007Kokori et al. 2023nan0.00780000000000000050.00012-0.00012Stassun et al. 2017nan7.680.11-0.11Stassun et al. 2017nannannannannan--nannan168.66.2-6.2Stassun et al. 2017nannannannannan--nan-46.78.1-6.1Narita et al. 2010nannannannannan--xo4bxo4 XO-5 bXO-5bGaia DR2 92030893201064844811Transit2008Burke et al. 2008XO116.716386839.0944695-21.5254-23.9055nan-9.841.52-1.52Gaia DR2276.2113.919-3.812TICv8100100000000G8 Vnan5430.070.0-70.0Smith 20151.130.03-0.03Smith 20151.040.03-0.03Smith 2015nannan8.50.8-0.8Burke et al. 2008nannan0.050.06-0.06Smith 20150.87096358995608070.080218711150938010.08021871115093801Ment et al. 2018nan4.350.02-0.02Smith 20151.010.06-0.06Smith 2015nannan0.70.5-0.5Bonomo et al. 2017nannannannannan--15.35290.0075771-0.0075771TICv815.0080.0116719-0.0116719TICv811.98890.000865-0.000865TICv811.82070.0008332-0.0008332TICv813.65610.016259-0.016259TICv812.1980.092-0.092TICv812.8990.056-0.056TICv8nannannanTICv810.7740.019-0.019TICv810.4430.021-0.021TICv810.3450.018-0.018TICv810.3330.024-0.024TICv810.3810.02-0.02TICv810.2920.067-0.067TICv8nannannanTICv811.94980.000237-0.000237TICv811.45560.0061-0.0061TICv8nannannanTICv8nannan4.18775586e-07-6e-07Smith 2015nan0.05150.0005-0.0005Smith 2015nannannannannanSmith 2015331.010.72-0.72Ment et al. 2018nannan86.80.2-0.2Smith 2015nan12.780.34-0.34Smith 2015nannan378.29.53-9.53Smith 2015nannan1.060.08-0.08Smith 2015002456864.31290.0002-0.0002Smith 2015nan3.11760.0168-0.0168Smith 20150.10390.0007-0.0007Smith 2015nan0.01080.0001-0.0001Smith 2015nan9.850.03-0.03Kokori et al. 2023nannan0.550.03-0.03Smith 2015nannan146.03.0-3.0Smith 2015nannan331.8145210.80622-10.80622Ment et al. 2018nannannannan--nannannannannan--xo5bxo5 XO-6 bXO-6bGaia DR2 111430848160079833611Transit2016Crouzet et al. 2017XO94.792955273.8275672-16.6426-22.5927nan-1.581.15-1.15Gaia DR2235.4792.443-2.393TICv8100100000000F5nan6720.0100.0-100.0Crouzet et al. 20171.930.18-0.18Crouzet et al. 20171.470.06-0.06Crouzet et al. 2017nannan1.880.9-0.2Crouzet et al. 2017nannan-0.070.1-0.1Crouzet et al. 20173.43557947899874660.047464284564832590.04746428456483259Gaia DR2nan4.040.1-0.1Crouzet et al. 20171.00.056-0.056Crouzet et al. 2017nannan48.03.0-3.0Crouzet et al. 2017nannannannannan--nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv810.2470.004-0.004TICv810.6780.056-0.056TICv8nannannanTICv89.4710.02-0.02TICv89.2660.017-0.017TICv89.2460.02-0.02TICv89.2130.023-0.023TICv89.2320.021-0.021TICv89.340.037-0.037TICv8nannannanTICv810.1910.000329-0.000329TICv89.882780.006-0.006TICv8nannannanTICv8nannan3.76500078.1e-06-8.1e-06Crouzet et al. 2017nan0.08150.0077-0.0077Crouzet et al. 2017nannannannannanCrouzet et al. 2017nannannan--nannan86.00.2-0.2Crouzet et al. 2017nan23.2032.466-2.466Crouzet et al. 2017nan1398.452nannannanCrouzet et al. 2017nan0.62nannannanCrouzet et al. 2017002456652.712450.00055-0.00055Crouzet et al. 2017nan2.90.1-0.1Crouzet et al. 20170.110.006-0.006Crouzet et al. 2017nan0.0147357.281e-05-7.281e-05ExoFOP-TESS TOInan9.080.17-0.17Crouzet et al. 2017nannan0.6330.034-0.034Crouzet et al. 2017nan450.0nannannanCrouzet et al. 2017nannannannannan--nan-20.72.3-2.3Crouzet et al. 2017nannannannannan--xo6bxo6 XO-7 bXO-7bGaia DR2 230333293154291404811Transit2019Crouzet et al. 2020XO277.478075385.2333208-15.354224.4608nan-12.980.02-0.02Crouzet et al. 2020234.1491.194-1.181TICv8100100000000N/Anan6250.0100.0-100.0Knudstrup et al. 20241.480.02-0.02Knudstrup et al. 20241.410.06-0.06Knudstrup et al. 2024nannan1.180.98-0.71Crouzet et al. 2020nannan0.4320.057-0.057Crouzet et al. 20202.697739432444920.0248470984077195640.024847098407719564Gaia DR2nan4.250.02-0.02Knudstrup et al. 20240.451080.10508-0.09372TICv8nannan5.10.5-0.5Knudstrup et al. 2024nannan3.620.12-0.12Knudstrup et al. 2024nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv810.5210.006-0.006TICv811.2290.087-0.087TICv8nannannanTICv89.5570.024-0.024TICv89.3080.03-0.03TICv89.2410.024-0.024TICv89.160.023-0.023TICv89.1920.02-0.02TICv89.1090.026-0.026TICv89.2150.444-0.444TICv810.45750.000449-0.000449TICv810.05210.0061-0.0061TICv8nannannanTICv8nannan2.86414244.3e-06-4.3e-06Crouzet et al. 2020nan0.044210.00062-0.00062Crouzet et al. 2020nannan0.0380.033-0.033Crouzet et al. 2020nannannan--nannan83.450.29-0.29Crouzet et al. 2020nan15.390.291-0.291Crouzet et al. 2020nannan225.3414710.80622-10.80622Crouzet et al. 2020nannan0.340.027-0.027Crouzet et al. 2020002457917.475030.00045-0.00045Crouzet et al. 2020nan2.7720.0336-0.0336Crouzet et al. 20200.095320.00093-0.00093Crouzet et al. 2020nan0.009090.00017999999999999998-0.00017999999999999998Crouzet et al. 2020nan6.430.14-0.14Crouzet et al. 2020nannan0.7090.023-0.023Crouzet et al. 2020nannan80.53.2-3.2Crouzet et al. 2020nannannannannan--nan0.020.0-14.0Knudstrup et al. 2024nannan70.01.7-1.7Knudstrup et al. 2024xo7bxo7 pi Men cHD 39091cGaia DR2 462303686537379340813Transit2018Gandolfi et al. 2018Transiting Exoplanet Survey Satellite (TESS)84.2992798-80.4646041311.1871048.84nan10.710.0-0.0Gandolfi et al. 201818.27020.0226-0.0226TICv8100100000000G0 Vnan5998.062.0-62.0Damasso et al. 20201.170.02-0.02Damasso et al. 20201.070.04-0.04Damasso et al. 2020nannan3.921.03-0.98Damasso et al. 2020nannan0.090.04-0.04Damasso et al. 20201.44543977074592740.0199694884136418230.019969488413641823Huang et al. 2018nan4.430.1-0.1Damasso et al. 20200.944580.05639-0.05639Damasso et al. 2020nannan3.340.07-0.07Damasso et al. 2020nannannannannan--nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv8nannannanTICv85.650.03-0.03TICv86.2520.021-0.021TICv8nannannanTICv84.8690.272-0.272TICv84.4240.226-0.226TICv84.2410.027-0.027TICv8nan0.329nanCutri et al. 2014nan0.16nanCutri et al. 2014nan0.02nanCutri et al. 2014nannannanCutri et al. 20145.51280.0019464-0.0019464TICv85.10540.0063-0.0063TICv8nannannanTICv8nannan6.2678521.6e-05-1.6e-05Damasso et al. 2020nan0.0680.0008-0.0008Damasso et al. 2020nannannannannanDamasso et al. 2020nannannanDamasso et al. 2020nannan87.050.15-0.15Damasso et al. 2020nan2.110.05-0.05Damasso et al. 2020nannan4.30.7-0.7Damasso et al. 2020nannan2.80.5-0.5Damasso et al. 2020002458519.80680.0003-0.0003Damasso et al. 2020nan2.9690.03-0.032Gandolfi et al. 20180.01650.0001-0.0001Damasso et al. 2020nan0.0003217.4600000000000006e-06-7.4600000000000006e-06ExoFOP-TESS TOInan12.50.3-0.3Damasso et al. 2020nannan0.6140.018-0.018Gandolfi et al. 2018nannan1.50.2-0.2Damasso et al. 2020nannan3.4961124770.317828407-0.317828407Feng et al. 2022nannannannan--nannannannannan--pimenchd39091 In\u00a0[4]: Copied! <pre>pop.name()\n</pre> pop.name() Out[4]: <pre>array(['55 Cnc e', 'AU Mic b', 'AU Mic c', ..., 'XO-6 b', 'XO-7 b',\n       'pi Men c'], shape=(4406,), dtype='&lt;U29')</pre> In\u00a0[5]: Copied! <pre>pop.radius()\n</pre> pop.radius() Out[5]:  $[1.875,~3.957,~2.522,~\\dots,~23.203,~15.39,~2.11] \\; \\mathrm{R_{\\oplus}}$  In\u00a0[6]: Copied! <pre>pop.get('radius')\n</pre> pop.get('radius') Out[6]:  $[1.875,~3.957,~2.522,~\\dots,~23.203,~15.39,~2.11] \\; \\mathrm{R_{\\oplus}}$  <p>We also have access to quantities that are not directly included in the table itself but can be calculated from them. For example, we can get an array of the amount of insolation that the planets receive from their stars as:</p> In\u00a0[7]: Copied! <pre>pop.insolation()\n</pre> pop.insolation() Out[7]:  $[3627577.1,~29608.871,~10158.55,~\\dots,~704037.88,~1878755.3,~425493.98] \\; \\mathrm{\\frac{W}{m^{2}}}$  <p>In this case, the insolation is calculated from the planet's orbital separation and the luminosity of the star (which is itself calculated from the stellar effective temperature and radius).</p> <p>If information needed to do a calculation is missing, <code>exoatlas</code> will try to estimate them from other available information. In the <code>.insolation</code> case, some planets had no semimajor axes defined in the <code>.standard</code> table, but we were able to calculate this quantity from the orbital period, the stellar mass, and Newton's Version of Kepler's 3rd Law.</p> <p>With this toolkit, you can now access the data you need to make some pretty fundamental plots in exoplanetary science. For example:</p> In\u00a0[8]: Copied! <pre>import matplotlib.pyplot as plt\n\nplt.loglog(pop.relative_insolation(), pop.radius(), \".\")\nplt.xlabel(\"Flux Received (relative to Earth)\")\nplt.ylabel(\"Planet Radius (Earth radii)\");\n</pre> import matplotlib.pyplot as plt  plt.loglog(pop.relative_insolation(), pop.radius(), \".\") plt.xlabel(\"Flux Received (relative to Earth)\") plt.ylabel(\"Planet Radius (Earth radii)\"); <p>For example, equilibrium temperature depends on assumed albedo, so it's nice to be able to provide that as a keyword:</p> In\u00a0[9]: Copied! <pre>pop.teq()\n</pre> pop.teq() Out[9]:  $[1999.7985,~601.08727,~460.03407,~\\dots,~1327.3366,~1696.4834,~1170.3221] \\; \\mathrm{K}$  In\u00a0[10]: Copied! <pre>pop.teq(albedo=0.7)\n</pre> pop.teq(albedo=0.7) Out[10]:  $[1480.0165,~444.85435,~340.46331,~\\dots,~982.339,~1255.5382,~866.13529] \\; \\mathrm{K}$  <p>Or, for some calculations, there's a <code>kludge</code> option that allows missing masses and/or radii to be replaced with reasonable (but horribly imprecise!) theoretical estimates. We can see this making a difference if we look at a population with imprecise or missing mass estimates, and try to calculate the estimate transmission spectroscopy signal (see Observing), which depends on the planet's surface gravity, and therefore its mass. By default, nothing will be calculated for planets without masses; if <code>kludge=True</code>, planet's without masses will use estimated masses instead!</p> In\u00a0[11]: Copied! <pre>b = ea.BadMass()\nb.transmission_signal()\n</pre> b = ea.BadMass() b.transmission_signal() Out[11]:  $[3.4989646 \\times 10^{-6},~6.5453939 \\times 10^{-5},~{\\rm NaN},~\\dots,~{\\rm NaN},~0.00023553748,~{\\rm NaN}] \\; \\mathrm{}$  In\u00a0[12]: Copied! <pre>b.transmission_signal(kludge=True)\n</pre> b.transmission_signal(kludge=True) Out[12]:  $[3.4989646 \\times 10^{-6},~6.5453939 \\times 10^{-5},~4.1568978 \\times 10^{-5},~\\dots,~0.22566346,~0.00023553748,~{\\rm NaN}] \\; \\mathrm{}$  In\u00a0[13]: Copied! <pre>sigma = pop.get_uncertainty('radius')\nsigma\n</pre> sigma = pop.get_uncertainty('radius') sigma Out[13]:  $[0.029,~0.146,~0.247,~\\dots,~2.466,~0.291,~0.05] \\; \\mathrm{R_{\\oplus}}$  In\u00a0[14]: Copied! <pre>sigma = pop.radius_uncertainty()\nsigma\n</pre> sigma = pop.radius_uncertainty() sigma Out[14]:  $[0.029,~0.146,~0.247,~\\dots,~2.466,~0.291,~0.05] \\; \\mathrm{R_{\\oplus}}$  <p>For more details about how uncertainties are calculated and propagated, please see Uncertainties.</p> In\u00a0[15]: Copied! <pre>pop\n</pre> pop Out[15]: <pre>\u2728 Transiting Exoplanets | 4406 elements \u2728</pre> In\u00a0[16]: Copied! <pre>one_planet = pop[0]\none_planet\n</pre> one_planet = pop[0] one_planet Out[16]: <pre>\u2728 Subset of Transiting Exoplanets | 1 elements \u2728</pre> In\u00a0[17]: Copied! <pre>one_planet.name(), one_planet.radius(), one_planet.insolation()\n</pre> one_planet.name(), one_planet.radius(), one_planet.insolation() Out[17]: <pre>(array(['55 Cnc e'], dtype='&lt;U29'),\n &lt;Quantity [1.875] earthRad&gt;,\n &lt;Quantity [3627577.07788034] W / m2&gt;)</pre> In\u00a0[18]: Copied! <pre>prime_planets = pop[[2, 3, 5, 7, 11, 13, 17, 19, 23]]\nprime_planets\n</pre> prime_planets = pop[[2, 3, 5, 7, 11, 13, 17, 19, 23]] prime_planets Out[18]: <pre>\u2728 Subset of Transiting Exoplanets | 9 elements \u2728</pre> In\u00a0[19]: Copied! <pre>first_ten = pop[:10]\nfirst_ten\n</pre> first_ten = pop[:10] first_ten Out[19]: <pre>\u2728 Subset of Transiting Exoplanets | 10 elements \u2728</pre> In\u00a0[20]: Copied! <pre>every_other_exoplanet = pop[::2]\nevery_other_exoplanet\n</pre> every_other_exoplanet = pop[::2] every_other_exoplanet Out[20]: <pre>\u2728 Subset of Transiting Exoplanets | 2203 elements \u2728</pre> In\u00a0[21]: Copied! <pre>import astropy.units as u\n\nsmall = pop[pop.radius() &lt; 4 * u.Rearth]\nsmall\n</pre> import astropy.units as u  small = pop[pop.radius() &lt; 4 * u.Rearth] small Out[21]: <pre>\u2728 Subset of Transiting Exoplanets | 3000 elements \u2728</pre> <p>Additionally, we can extract an individual planet or a list of planets by indexing the population with planet name(s). This is using astropy tables' <code>.loc</code> functionality, with <code>\"name\"</code> being used as an index.</p> In\u00a0[22]: Copied! <pre>cute_planet = pop[\"GJ 1214b\"]\ncute_planet\n</pre> cute_planet = pop[\"GJ 1214b\"] cute_planet Out[22]: <pre>\u2728 GJ 1214b | 1 elements \u2728</pre> In\u00a0[23]: Copied! <pre>cute_planets = pop[[\"LHS 1140b\", \"GJ 1214b\", \"GJ 436b\"]]\ncute_planets\n</pre> cute_planets = pop[[\"LHS 1140b\", \"GJ 1214b\", \"GJ 436b\"]] cute_planets Out[23]: <pre>\u2728 LHS 1140b+GJ 1214b+GJ 436b | 3 elements \u2728</pre> <p>Systems of planets can also be extracted via name using the <code>hostname</code>.</p> In\u00a0[24]: Copied! <pre>pop['TRAPPIST-1']\n</pre> pop['TRAPPIST-1'] Out[24]: <pre>\u2728 TRAPPIST-1 | 7 elements \u2728</pre> <p>Unfortunately it's not possible (right now) to mix and match selecting objects via both the planet name and the host name at the same time. Sorry!</p> In\u00a0[25]: Copied! <pre>s = ea.SolarSystem()\nnew_column_name='is_inhabited'\nnew_column_data=(s.name() == 'Earth')*1\nnew_column_uncertainty = (s.name() != 'Earth')*0.01\ns.add_column(name=new_column_name, data=new_column_data, uncertainty=new_column_uncertainty)\n</pre> s = ea.SolarSystem() new_column_name='is_inhabited' new_column_data=(s.name() == 'Earth')*1 new_column_uncertainty = (s.name() != 'Earth')*0.01 s.add_column(name=new_column_name, data=new_column_data, uncertainty=new_column_uncertainty)  <p>We can see that our column was added, both to the table and as a callable column method.</p> In\u00a0[26]: Copied! <pre>s.standard['is_inhabited']\n</pre> s.standard['is_inhabited'] Out[26]:  &lt;Column name='is_inhabited' dtype='int64' length=8&gt;  0 0 1 0 0 0 0 0 In\u00a0[27]: Copied! <pre>s.standard['is_inhabited_uncertainty']\n</pre> s.standard['is_inhabited_uncertainty'] Out[27]:  &lt;Column name='is_inhabited_uncertainty' dtype='float64' length=8&gt;  0.01 0.01 0.0 0.01 0.01 0.01 0.01 0.01 In\u00a0[28]: Copied! <pre>s.is_inhabited()\n</pre> s.is_inhabited() Out[28]: <pre>array([0, 0, 1, 0, 0, 0, 0, 0])</pre> In\u00a0[29]: Copied! <pre>s.is_inhabited_uncertainty()\n</pre> s.is_inhabited_uncertainty() Out[29]: <pre>array([0.01, 0.01, 0.  , 0.01, 0.01, 0.01, 0.01, 0.01])</pre> In\u00a0[30]: Copied! <pre>import numpy as np \n\ndef f(self, distribution=False):\n    '''\n    Surface Area (m)\n    \n    Calculate the surface area of a planet,\n    based on its radius.\n    '''\n    return 4*np.pi*self.radius(distribution=distribution)\n\n\npop.add_calculation(name='surface_area', function=f)\n</pre> import numpy as np   def f(self, distribution=False):     '''     Surface Area (m)          Calculate the surface area of a planet,     based on its radius.     '''     return 4*np.pi*self.radius(distribution=distribution)   pop.add_calculation(name='surface_area', function=f) In\u00a0[31]: Copied! <pre>pop.surface_area()\n</pre> pop.surface_area() Out[31]:  $[23.561945,~49.725129,~31.692387,~\\dots,~291.5775,~193.39644,~26.515042] \\; \\mathrm{R_{\\oplus}}$  In\u00a0[32]: Copied! <pre>pop.surface_area_uncertainty()\n</pre> pop.surface_area_uncertainty() Out[32]:  $[0.36076997,~2.019673,~3.2742204,~\\dots,~33.962389,~3.6238676,~0.65121632] \\; \\mathrm{R_{\\oplus}}$  <p>Short descriptions of some common attributes can printed with the <code>describe_columns()</code> function.</p> In\u00a0[33]: Copied! <pre>ea.describe_columns()\n</pre> ea.describe_columns() <pre>                    name = name of the planet\n                hostname = name of the host star\n                      ra = Right Ascension of the system\n                     dec = Declination of the system\n                distance = distance to the system\n            stellar_teff = stellar effective temperature\n            stellar_mass = stellar mass\n          stellar_radius = stellar radius\n      discovery_facility = telescope/project that found this planet\n                  period = orbital period of the planet\n            eccentricity = eccentricity\n  argument_of_periastron = argument of periastron\n                  radius = planet radius\n                    mass = planet mass\n        transit_midpoint = a transit midpoint\n        transit_duration = duration of the transit\n           transit_depth = fraction of starlight the planet blocks\ntransit_impact_parameter = (transit-derived) impact parameter b\n    scaled_semimajoraxis = scaled orbital distance a/R*\n           scaled_radius = ratio of planet radius to stellar radius\n      stellar_luminosity = bolometric luminosity of the star\n        distance_modulus = apparent magnitude - absolute magnitude\n             inclination = orbital inclination\n           semimajoraxis = the semimajor axis of the planet's orbit\n                 density = density of the planet\n              insolation = bolometric energy flux the planet receives from its star\n     relative_insolation = insolation relative to Earth\n log_relative_insolation = log10(insolation relative to Earth)\n                     teq = equilibrium temperature of the planet (assuming 0 albedo)\n       planet_luminosity = power emitted by the planet (assuming 0 albedo)\n         surface_gravity = surface gravitational acceleration of the planet\n            scale_height = scale height of an H2-rich atmosphere\n         escape_velocity = escape velocity of the planet\n        escape_parameter = ratio of gravitational potential to thermal energy for an H atom\n     transmission_signal = transit depth of one scale height of atmosphere (a function of mean molecular weight)\n         emission_signal = thermal-emission eclipse depth (a function of wavelength)\n       reflection_signal = reflected-light eclipse depth (a function of albedo)\n       depth_uncertainty = predicted, photon-limited transit depth uncertainty\n        transmission_snr = S/N for transmission\n            emission_snr = S/N for emission\n          reflection_snr = S/N for reflection\n</pre> <p>Most quantities will have docstrings associated with them, which you can view either with putting a <code>?</code> after the method name, or in some tools like <code>jupyter lab</code>, hovering the cursor over the method name.</p> In\u00a0[34]: Copied! <pre>pop.mass?\n</pre> pop.mass? In\u00a0[35]: Copied! <pre>pop.teq?\n</pre> pop.teq?"},{"location":"populations/#populations","title":"Populations\u00b6","text":"<p>An exoplanet <code>Population</code> is designed to be a (hopefully!) relatively easy way to interact with data for a group of exoplanet systems. Here we step through the basics of how we can explore a population of planets, access standardized planet properties, and filter subsets of planet populations.</p>"},{"location":"populations/#getting-started","title":"Getting started\u00b6","text":"<p>The <code>exoatlas</code> package contains the tools we will use, and <code>astropy.units</code> will help us handle unit conversions for calculations.</p>"},{"location":"populations/#create-a-population","title":"Create a <code>Population</code>\u00b6","text":"<p>Now, to get started, we'll make a population that contains all confirmed transiting exoplanets. We can read more about the different populations we can create over one the Creating page. When we create this population, the code will download a table of the latest data from the NASA Exoplanet Archive.</p>"},{"location":"populations/#whats-inside-a-population","title":"What's inside a <code>Population</code>?\u00b6","text":"<p>The core ingredient to an exoplanet <code>Population</code> is a table of planet properties that have been standardized and populated with astropy units. This <code>pop.standard</code> table is an astropy Table, so its contents can be accessed or modified as any other astropy <code>Table</code>. This <code>.standard</code> table is created by processing the raw data from the archive, providing slightly more verbose names, and attaching units.</p>"},{"location":"populations/#how-do-we-access-planet-properties","title":"How do we access planet properties?\u00b6","text":"<p>The main way to access planet properties within a <code>Population</code> is with its methods. That is, we can access an array of the values for some property <code>x</code> by calling <code>pop.x()</code>. Behind the scenes, the population will look to see if there is a column called <code>\"x\"</code> in the standardized table and return that column, or it will do a calculation using some of the internal data. For example, we can get an array of planet names with:</p>"},{"location":"populations/#why-is-everything-a-function","title":"Why is everything a function?\u00b6","text":"<p>Many bits of data are simply columns in a giant table, so it might feel a little unnecessary to have to call them as functions. However, others that depend on calculations might need to have custom keyword inputs and/or options to specify, so they need to be callable. For consistency, we just make everything act like a function.</p>"},{"location":"populations/#how-do-we-retrieve-uncertainties","title":"How do we retrieve uncertainties?\u00b6","text":"<p>We will often want to know the uncertainty on a particular quantity. We can retrieve this either with the <code>.get_uncertainty()</code> method, or by appending <code>_uncertainty</code> to the name of a quantity. For core table quantities, uncertainties are extracted directly from the table.</p>"},{"location":"populations/#how-do-we-access-some-sub-population-of-planets","title":"How do we access some sub-population of planets?\u00b6","text":"<p>Often we'll want to pull out some subset of a population. We might want a smaller sample of planets, or all the planets that meet some particular criterion, or maybe the properties of one individual planet. In our experience with <code>numpy</code> arrays or <code>astropy</code> tables, we've often done this by indexing (<code>x[0]</code> or <code>x[[0, 1, 5]]</code>), slicing (<code>x[3:30]</code>), or masking (<code>x[some_array &gt; some_other_array]</code>).</p> <p>We can apply the same methods to a <code>Population</code>, creating smaller populations by indexing, slicing, or masking. Anything we can do with a <code>Population</code> we can do with one of these sub-<code>Population</code>s that we create.</p>"},{"location":"populations/#how-do-we-add-new-quantities","title":"How do we add new quantities?\u00b6","text":"<p>Obviously sometimes we might sometimes want to add additional quantities into a population, for filtering or calculating or visualizing.</p>"},{"location":"populations/#add_column-for-arrays","title":"<code>.add_column</code> for arrays\u00b6","text":"<p>For static quantities, we could just add a new column to the internal <code>.standard</code> astropy Table, it's a little more graceful to use the <code>.add_column</code> wrapper. This both adds the data into <code>.standard</code> and registers a new method that can be used to extract it (or calculate its uncertainties).</p>"},{"location":"populations/#add_calculation-for-functions","title":"<code>.add_calculation</code> for functions\u00b6","text":"<p>For quantities we want to calculate on the fly, we can define a new function and then assign it to a method name inside our population using <code>.add_calculation</code>. If we want to be able to propagate uncertainties, we will need to pass the <code>distribution</code> keyword into all ingredient quantities that go into the calculation, and set its default for the function overall to <code>False</code>. This says that when the method is being called normally, it should just return quantity arrays, but when it's being called inside of an uncertainty propagation calculation, everything will be treated as a quantity distributions.</p>"},{"location":"populations/#how-do-we-get-help-on-available-quantities","title":"How do we get help on available quantities?\u00b6","text":"<p>It's super important to be able to know exactly what the quantity we're retrieving represents. There are few tools for quick documentation.</p>"},{"location":"populations/#explore","title":"Explore!\u00b6","text":"<p>That's about it. For more information about different pre-defined populations see Creating, and for more about pre-packaged visualizations see Visualizing.</p>"},{"location":"quickstart/","title":"Quickstart","text":"In\u00a0[1]: Copied! <pre>import exoatlas as ea\nimport exoatlas.visualizations as vi\nimport astropy.units as u \n\nea.version()\n</pre> import exoatlas as ea import exoatlas.visualizations as vi import astropy.units as u   ea.version() Out[1]: <pre>'0.6.1'</pre> In\u00a0[2]: Copied! <pre>solar = ea.SolarSystem()\nsolar\n</pre> solar = ea.SolarSystem() solar Out[2]: <pre>\u2728 Solar System | 8 elements \u2728</pre> In\u00a0[3]: Copied! <pre>exoplanets = ea.Exoplanets() \nexoplanets\n</pre> exoplanets = ea.Exoplanets()  exoplanets Out[3]: <pre>\u2728 Exoplanets | 5862 elements \u2728</pre> In\u00a0[4]: Copied! <pre>exoplanets.mass()\n</pre> exoplanets.mass() Out[4]:  $[4914.8985,~4684.8142,~1131.1513,~\\dots,~3257.7412,~162.09249,~616.90494] \\; \\mathrm{M_{\\oplus}}$  In\u00a0[5]: Copied! <pre>exoplanets.mass_uncertainty()\n</pre> exoplanets.mass_uncertainty() Out[5]:  $[39.41072,~794.575,~37.503755,~\\dots,~635.65681,~50.852545,~42.906835] \\; \\mathrm{M_{\\oplus}}$  <p><code>exoatlas</code> can also calculate derived quantities and use <code>astropy.uncertainty</code> to propagate uncertainties for those derived quantities.</p> In\u00a0[6]: Copied! <pre>exoplanets.insolation()\n</pre> exoplanets.insolation() Out[6]:  $[93243.949,~156505.06,~156786.2,~\\dots,~721.81522,~61680.406,~203775.14] \\; \\mathrm{\\frac{W}{m^{2}}}$  In\u00a0[7]: Copied! <pre>exoplanets.insolation_uncertainty()\n</pre> exoplanets.insolation_uncertainty() Out[7]:  $[{\\rm NaN},~15411.808,~31119.408,~\\dots,~25.360147,~43306.36,~31273.628] \\; \\mathrm{\\frac{W}{m^{2}}}$  In\u00a0[8]: Copied! <pre>exoplanets.insolation_uncertainty()/exoplanets.insolation()\n</pre> exoplanets.insolation_uncertainty()/exoplanets.insolation() Out[8]:  $[0.45997177,~0.090775355,~0.19565299,~\\dots,~0.039519449,~0.66155605,~0.16261794] \\; \\mathrm{}$  In\u00a0[9]: Copied! <pre>nearby = exoplanets[exoplanets.distance() &lt; 30*u.pc]\nnearby.label = 'Nearby'\nnearby.color = 'coral'\nnearby.marker = 'P'\nnearby.size = 20\nnearby\n</pre> nearby = exoplanets[exoplanets.distance() &lt; 30*u.pc] nearby.label = 'Nearby' nearby.color = 'coral' nearby.marker = 'P' nearby.size = 20 nearby Out[9]: <pre>\u2728 Nearby | 487 elements \u2728</pre> In\u00a0[10]: Copied! <pre>easy = exoplanets[exoplanets.transmission_snr(telescope='JWST', wavelength=4*u.micron) &gt; 10]\neasy.label = 'Easy'\neasy.color='orchid'\neasy.marker='*'\neasy.outlined=True \neasy.filled=False \neasy.size=100\neasy.annotate_planets = True\neasy\n</pre> easy = exoplanets[exoplanets.transmission_snr(telescope='JWST', wavelength=4*u.micron) &gt; 10] easy.label = 'Easy' easy.color='orchid' easy.marker='*' easy.outlined=True  easy.filled=False  easy.size=100 easy.annotate_planets = True easy Out[10]: <pre>\u2728 Easy | 9 elements \u2728</pre> In\u00a0[11]: Copied! <pre>first = exoplanets['HD209458b']\nfirst.size = 500\nfirst.color = 'magenta'\nfirst\n</pre> first = exoplanets['HD209458b'] first.size = 500 first.color = 'magenta' first Out[11]: <pre>\u2728 HD209458b | 1 elements \u2728</pre> In\u00a0[12]: Copied! <pre>ps = vi.PlanetGallery()\nps.build([solar, exoplanets, nearby, easy, first])\n</pre> ps = vi.PlanetGallery() ps.build([solar, exoplanets, nearby, easy, first])  <p>Gosh, what a complicated plot! But at least it demonstrates lots of ways of visualizing populations!</p> In\u00a0[13]: Copied! <pre>easy.create_planning_table()\n</pre> easy.create_planning_table() Out[13]: QTable length=9 nameradecperiodtransit_midpointtransit_durationradiusrelative_insolationstellar_radiusstellar_teffdistance degdegddhearthRadsolRadKpc str29float64float64float64float64float64float64float64float64float64float64 GJ 436 b175.550536326.70306692.643883122454510.801621.005364.1730.705347872194140.463586.119.75321 HD 189733 b300.182122322.70977592.218575672453955.5255511.823362112.666354.8314064285420.755052.019.7638 HD 209458 b330.795021918.88424193.524748592451659.937423.07215.581770.03701776588371.186091.048.3016 HIP 65 A b0.1856063-54.83082280.98097342458326.104180.7857622.754660.97434112402390.724590.061.7856 KELT-11 b161.7069053-9.39936464.73612457483.4317.137615.1321429.43146692046822.695375.099.1596 TOI-1420 b322.941809266.34900546.95610632459517.433053.37211.89139.79231679570460.925510.0201.918 WASP-107 b188.3864277-10.1462141nan2457584.3297462.7386410.53651.0827913896996360.664425.064.7414 WASP-127 b160.5587646-3.83499894.178062032456776.621244.3528814.695773.23103468837621.335620.0159.507 WASP-69 b315.0259661-5.0948573.868142459798.7754592.161019512.442166.250451305394050.864700.049.9605"},{"location":"quickstart/#quickstart","title":"Quickstart\u00b6","text":"<p>Let's take a brief whirlwind tour of some of the basic tools in <code>exoatlas</code>. Most of the concepts seen here are decribed in more detail later, but hopefully this is enough for you to get started!</p>"},{"location":"quickstart/#make-populations-of-planets","title":"\ud83c\udf0c Make Populations of Planets\u00b6","text":"<p><code>exoatlas</code> can create objects containing properties for large samples of planets. Solar System planets come from JPL Solar System Dynamics, and exoplanets come from the NASA Exoplanet Archive.</p>"},{"location":"quickstart/#extract-quantities-and-uncertainties","title":"\ud83e\uddee Extract Quantities and Uncertainties\u00b6","text":"<p>For a population, <code>exoatlas</code> can provide easy access to archival table columns and their uncertainties. All quantities have <code>astropy.units</code> attached to them, to minimize confusion about unit conversion.</p>"},{"location":"quickstart/#filter-populations-by-properties","title":"\u2697\ufe0f Filter Populations by Properties\u00b6","text":"<p><code>exoatlas</code> can extract subsets of populations, selecting planets just in a specific range of interest for particular properties. These subsets have all the same powers as their parent populations. By setting attributes for these subset populations, we can affect how they'll be visualized.</p>"},{"location":"quickstart/#visualize-populations-together","title":"\ud83c\udfa8 Visualize Populations Together\u00b6","text":"<p><code>exoatlas</code> provides some built-in visualizations, as well as a framework for constructing new plots that can easily compare multiple populations to each other.</p>"},{"location":"quickstart/#create-tables","title":"\ud83d\udcd3 Create Tables\u00b6","text":"<p><code>exoatlas</code> can save populations out into tables, for whatever other purposes you want!</p>"},{"location":"quickstart/#and-more","title":"\ud83c\udf89 and more...\u00b6","text":"<p>Please explore the rest of the documentation to learn if/how you can use <code>exoatlas</code> to help with your research or teaching or learning!</p>"},{"location":"testing/","title":"Testing Code Automatically","text":"<p>As we write more and more code, especially bits that start to depend on each other in complicated ways, its easy for bugs and unexpected behavior to creep in. Or, as versions of various dependencies get updated from year to year, some code that used to behave one way might stop working.</p> <p>To help solve these problems, we can write simple tests for our code. When we make changes to the code package, we can run the tests to make sure we haven't broken anything and the code's doing what we want.</p>"},{"location":"testing/#testing-code-automatically","title":"Testing Code Automatically\u00b6","text":""},{"location":"testing/#how-do-we-test-code-with-pytest","title":"How do we test code with <code>pytest</code>?\u00b6","text":"<p>Here's a quick overview of what running tests might look like:</p> <ol> <li>Write a snippet of code that should work if your code is working and (ideally) raise an error if not.</li> <li>Put that code in a function that has the string <code>test</code> in its name, stored in a <code>.py</code> file with <code>test</code> in its name inside the <code>exoatlas/tests</code> directory.</li> <li>From the main repository directory, from the command line run <code>pytest</code>. This will search for all your test functions, run them all, and give you a report about what worked and what didn't. (The Developer Installation should have automatically installed <code>pytest</code> for you.)</li> </ol> <p>If one or more of your tests break, you either need to fix something in your code or in your test function. If all of your tests pass, your should celebrate and feel very pleased with yourself.</p>"},{"location":"testing/#what-are-useful-tests","title":"What are useful tests?\u00b6","text":"<p>The most useful tests are the ones you've actually written! It's OK if your automatic tests don't comprehensively cover every single possible way that your code might goof up; often a code's error might be a fundamental conceptual misunderstanding that can only be caught by a clever and cautious human noticing something amiss in a plot.</p> <p>In approximate order from simpler to more sophisticated, tests might look like:</p> <ul> <li>Does this function run on reasonable inputs?</li> <li>Does it run, and give plausible outputs?</li> <li>Does it run, give accurate outputs?</li> <li>Does it run, give accurate outputs, and respond appropriately to changing inputs?</li> <li>Does it run, give accurate outputs, respond appropriately, and raise informative errors when it should?</li> </ul> <p>No matter how detailed and thoughtfully you write your tests, the Universe is complicated, so they might not capture every fascinating way your code might break. Don't aim for perfection; just try to do something.</p>"},{"location":"uncertainties/","title":"Uncertainties","text":"In\u00a0[1]: Copied! <pre>import exoatlas as ea\nimport astropy.units as u\nimport numpy as np\n\nea.version()\n</pre> import exoatlas as ea import astropy.units as u import numpy as np  ea.version() Out[1]: <pre>'0.6.1'</pre> <p>This page expands the very brief discussion of uncertainties on (Populations)[populations.ipynb], providing more details and a little explanation of how uncertainty estimates are calculated.</p> In\u00a0[2]: Copied! <pre>pop = ea.TransitingExoplanets()\n</pre> pop = ea.TransitingExoplanets() In\u00a0[3]: Copied! <pre>sigma = pop.get_uncertainty('radius')\nsigma\n</pre> sigma = pop.get_uncertainty('radius') sigma Out[3]:  $[0.029,~0.146,~0.247,~\\dots,~2.466,~0.291,~0.05] \\; \\mathrm{R_{\\oplus}}$  In\u00a0[4]: Copied! <pre>sigma = pop.radius_uncertainty()\nsigma\n</pre> sigma = pop.radius_uncertainty() sigma Out[4]:  $[0.029,~0.146,~0.247,~\\dots,~2.466,~0.291,~0.05] \\; \\mathrm{R_{\\oplus}}$  <p>Some uncertainties might be asymmetric, with different upper and lower uncertainties, such as $x^{+\\sigma_{upper}}_{-\\sigma_{lower}}$. We can extract these asymmetric uncertainties with <code>.get_uncertainty_lowerupper()</code> or by appending <code>_uncertainty_lowerupper</code>.</p> In\u00a0[5]: Copied! <pre>sigma_lower, sigma_upper = pop.get_uncertainty_lowerupper('stellar_teff')\nsigma_lower, sigma_upper\n</pre> sigma_lower, sigma_upper = pop.get_uncertainty_lowerupper('stellar_teff') sigma_lower, sigma_upper Out[5]: <pre>(&lt;Quantity [ 18.,  88.,  88., ..., 100., 100.,  62.] K&gt;,\n &lt;Quantity [ 18.,  90.,  90., ..., 100., 100.,  62.] K&gt;)</pre> In\u00a0[6]: Copied! <pre>sigma_lower, sigma_upper = pop.stellar_teff_uncertainty_lowerupper()\nsigma_lower, sigma_upper\n</pre> sigma_lower, sigma_upper = pop.stellar_teff_uncertainty_lowerupper() sigma_lower, sigma_upper Out[6]: <pre>(&lt;Quantity [ 18.,  88.,  88., ..., 100., 100.,  62.] K&gt;,\n &lt;Quantity [ 18.,  90.,  90., ..., 100., 100.,  62.] K&gt;)</pre> <p>We can force asymmetric uncertaintoies to be symmetric, calculated as $\\sigma = (\\sigma_{lower} + \\sigma_{upper})/2$, just by asking for the a simple symmetric uncertainty.</p> In\u00a0[7]: Copied! <pre>sigma = pop.get_uncertainty('stellar_teff')\nsigma \n</pre> sigma = pop.get_uncertainty('stellar_teff') sigma  Out[7]:  $[18,~89,~89,~\\dots,~100,~100,~62] \\; \\mathrm{K}$  <p>We can also estimate uncertainties on derived quantities in the same way. Behind the scenes, uncertainties on derived quantities are estimated using <code>astropy.uncertainty</code>. Samples are created for each ingredient table column using skew-normal distributions for asymmetric uncertainties as advocated by Pineda et al. (2021), and estimated errors are based on the central 68% confidence intervals of the calculated distributions.</p> In\u00a0[8]: Copied! <pre>pop.get_uncertainty('scale_height')\n</pre> pop.get_uncertainty('scale_height') Out[8]:  $[17.176313,~19.118233,~37.027611,~\\dots,~{\\rm NaN},~44.160339,~82.859171] \\; \\mathrm{km}$  In\u00a0[9]: Copied! <pre>pop.scale_height_uncertainty()\n</pre> pop.scale_height_uncertainty() Out[9]:  $[17.397183,~20.341052,~37.661469,~\\dots,~{\\rm NaN},~42.421947,~76.694111] \\; \\mathrm{km}$  <p>We might commonly be interested in the fractional uncertainty on a quantity. We can either calculate this ourselves, or use the <code>.get_fractional_uncertainty</code> wrapper.</p> In\u00a0[10]: Copied! <pre>pop.get_uncertainty('scale_height')/pop.get('scale_height')\n</pre> pop.get_uncertainty('scale_height')/pop.get('scale_height') Out[10]:  $[0.056814161,~0.1114285,~0.3310268,~\\dots,~{\\rm NaN},~0.061941476,~0.19445763] \\; \\mathrm{}$  In\u00a0[11]: Copied! <pre>pop.get_fractional_uncertainty('scale_height')\n</pre> pop.get_fractional_uncertainty('scale_height') Out[11]:  $[0.052527112,~0.11617907,~0.33192916,~\\dots,~{\\rm NaN},~0.071103471,~0.16680448] \\; \\mathrm{}$  <p>Keyword arguments can be supplied when calculating derived quantities, to be passed into the function that actually does the calculating.</p> In\u00a0[12]: Copied! <pre>pop.teq_uncertainty(albedo=0.5)\n</pre> pop.teq_uncertainty(albedo=0.5) Out[12]:  $[10.285707,~13.754292,~11.62289,~\\dots,~59.180274,~11.816826,~6.887976] \\; \\mathrm{K}$  In\u00a0[13]: Copied! <pre>pop.get_uncertainty('teq', albedo=0.5)\n</pre> pop.get_uncertainty('teq', albedo=0.5) Out[13]:  $[10.872346,~16.151682,~11.422213,~\\dots,~57.264707,~10.583643,~6.8317094] \\; \\mathrm{K}$  In\u00a0[14]: Copied! <pre>pop.teq_uncertainty_lowerupper(albedo=0.5)\n</pre> pop.teq_uncertainty_lowerupper(albedo=0.5) Out[14]: <pre>(&lt;Quantity [ 8.96865435, 17.11147806, 12.75569718, ..., 48.32213705,\n             9.68170846,  7.19693695] K&gt;,\n &lt;Quantity [11.14883984, 15.04374924, 11.542309  , ..., 60.65182976,\n            11.25457105,  6.60791844] K&gt;)</pre> In\u00a0[15]: Copied! <pre>pop.get_uncertainty_lowerupper('teq', albedo=0.5)\n</pre> pop.get_uncertainty_lowerupper('teq', albedo=0.5) Out[15]: <pre>(&lt;Quantity [11.39350151, 17.32919239, 13.30459055, ..., 55.43776537,\n            11.95416482,  6.89169597] K&gt;,\n &lt;Quantity [10.54911506, 16.33270415, 11.78936737, ..., 67.71317688,\n             9.28658832,  6.78606355] K&gt;)</pre> <p>Propagated uncertainties are calculated by generating lots of numerical samples for each quantity for each planet, calculating derived quantities, and then estimated confidence intervals from the calculated samples. To avoid memory issues on larger planet populations, the default number of samples to use for these distributions is $\\sf N_{samples}=100$. That is not enough to achieve precise uncertainty estimates, so in practice we loop over $\\sf N_{iteration}$ iterations calculating uncertainties, and average the results together. We target a desired fractional uncertainty on the uncertainties $\\sf f$ by noting that $\\sf f \\approx \\sqrt{1/N_{total}}$, where $\\sf N_{total} = N_{samples}\\cdot N_{iteration}$ is effectively the total number of samples we generate. By default, we target $\\sf f = 0.05$, so $\\sf N_{iterations} = 4$ iterations are needed.</p> <p>In this example, we'll look in detail at the uncertainties for a small subset population. We'll crudely estimate the fractional uncertainty on the uncertainties by doing two independent calculations and looking at their difference.</p> In\u00a0[16]: Copied! <pre>subset = pop[:5]\n</pre> subset = pop[:5] In\u00a0[17]: Copied! <pre>subset.targeted_fractional_uncertainty_precision\n</pre> subset.targeted_fractional_uncertainty_precision Out[17]: <pre>0.05</pre> In\u00a0[18]: Copied! <pre>a = subset.get_uncertainty('teq')\nb = subset.get_uncertainty('teq')\naverage_uncertainty = 0.5*(a + b)\nfractional_uncertainty_on_uncertainty = np.abs(a - b)/average_uncertainty\naverage_uncertainty, fractional_uncertainty_on_uncertainty\n</pre> a = subset.get_uncertainty('teq') b = subset.get_uncertainty('teq') average_uncertainty = 0.5*(a + b) fractional_uncertainty_on_uncertainty = np.abs(a - b)/average_uncertainty average_uncertainty, fractional_uncertainty_on_uncertainty Out[18]: <pre>(&lt;Quantity [13.20493873, 18.66289309, 14.10620852, 27.31386299, 50.66176485] K&gt;,\n &lt;Quantity [0.00591165, 0.05413261, 0.02248504, 0.01917895, 0.12974726]&gt;)</pre> <p>If we want to improve the fractional uncertainty, we can update the secret variable <code>.targeted_fractional_uncertainty_precision</code> to target a lower value. Here, let's aim for 1% fractional precision. Calculating uncertainties will now take longer because we need to perform more iterations.</p> In\u00a0[19]: Copied! <pre>subset.targeted_fractional_uncertainty_precision = 0.01\n</pre> subset.targeted_fractional_uncertainty_precision = 0.01 In\u00a0[20]: Copied! <pre>a = subset.get_uncertainty('teq')\nb = subset.get_uncertainty('teq')\naverage_uncertainty = 0.5*(a + b)\nfractional_uncertainty_on_uncertainty = np.abs(a - b)/average_uncertainty\naverage_uncertainty, fractional_uncertainty_on_uncertainty\n</pre> a = subset.get_uncertainty('teq') b = subset.get_uncertainty('teq') average_uncertainty = 0.5*(a + b) fractional_uncertainty_on_uncertainty = np.abs(a - b)/average_uncertainty average_uncertainty, fractional_uncertainty_on_uncertainty Out[20]: <pre>(&lt;Quantity [12.8628418 , 18.63320335, 14.17975458, 29.03657489, 55.05499237] K&gt;,\n &lt;Quantity [0.0095345 , 0.00301874, 0.00069532, 0.01968213, 0.00484136]&gt;)</pre>"},{"location":"uncertainties/#uncertainties","title":"Uncertainties\u00b6","text":"<p>Since most exoplanet properties are derived from measurements, most have uncertainties. The reliability of a visualization or calculation depends crucially on at least a qualitative understanding of the uncertainties associed with each quantity. To try to help with this, <code>exoatlas</code> provides an interface to both uncertainties that are reported in original archive tables and propagated uncertainties estimated for calculated quantities.</p>"},{"location":"uncertainties/#how-do-we-retrieve-uncertainties","title":"How do we retrieve uncertainties?\u00b6","text":"<p>We will often want to know the uncertainty on a particular quantity. We can retrieve this either with the <code>.get_uncertainty()</code> method, or by appending <code>_uncertainty</code> to the name of a quantity. For core table quantities, uncertainties are extracted directly from the table.</p>"},{"location":"uncertainties/#how-do-we-get-more-precise-propagated-uncertainties","title":"How do we get more precise propagated uncertainties?\u00b6","text":""},{"location":"using-skewnormal-for-asymmetric-uncertainties/","title":"Using Skew Normal Distributions for Asymmetric Uncertainties","text":"In\u00a0[1]: Copied! <pre>from exoatlas.populations.pineda_skew import *\n</pre> from exoatlas.populations.pineda_skew import * <p>To see how this looks for different levels of asymmetry, you can run this test function, which shows the generated samples on a violin plot.</p> In\u00a0[2]: Copied! <pre>from exoatlas.tests import test_skew\n</pre> from exoatlas.tests import test_skew In\u00a0[3]: Copied! <pre>test_skew()\n</pre> test_skew() In\u00a0[4]: Copied! <pre>plot_skewnormal(mu=0, sigma=1, alpha=5)\n</pre> plot_skewnormal(mu=0, sigma=1, alpha=5) <p>Here we derive those tables, assuming iterating a few times, using a smoothed version of the previous results as guesses to the subsequent iterations. We derive tables assuming $\\mu$ represents either the <code>mode</code> or the <code>median</code> of the distribution, and that the range of $\\mu - \\sigma_{lower}$ to $\\mu + \\sigma_{upper}$ represents the central $68\\%$ confidence interval. We save the resulting table into the code, so most folks will never actually need to run this code directly.</p> In\u00a0[5]: Copied! <pre>tables = make_skewnormal_parameters_to_interpolate()\n</pre> tables = make_skewnormal_parameters_to_interpolate() <pre>saved parameter interpolating table to skewnormal_parameters_for_interpolating_mode.ecsv\n</pre> <pre>saved parameter interpolating table to skewnormal_parameters_for_interpolating_median.ecsv\n</pre> <p>Practically, we use the mode (= \"Peak\") because it's impossible to achieve errorbars more than about 50% asymmetric if we treat $\\mu$ as representing the median.</p>"},{"location":"using-skewnormal-for-asymmetric-uncertainties/#using-skew-normal-distributions-for-asymmetric-uncertainties","title":"Using Skew Normal Distributions for Asymmetric Uncertainties\u00b6","text":"<p>Many exoplanet parameters often have asymmetric errorbars, expressed as something like $$\\mu^{+\\sigma_{upper}}_{-\\sigma_{lower}}$$ where $\\mu$ is some estimate of central tendency, and the $\\sigma$s are the uncertainties. In <code>exoatlas</code>, we follow Pineda et al. (2021) to use skew normal distributions to approximate the probability distributions of table quantities with unequal upper and lower uncertainties.</p>"},{"location":"using-skewnormal-for-asymmetric-uncertainties/#creating-a-samples-with-a-skew-normal","title":"Creating a Samples with a Skew Normal\u00b6","text":"<p>For some quantity $\\mu^{+\\sigma_{upper}}_{-\\sigma_{lower}}$, we can make samples from a skew normal that treats $\\mu$ as the mode of the distribution and $\\mu - \\sigma_{lower}$ to $\\mu + \\sigma_{upper}$ as the central $68\\%$ confidence interval. Behind the scenes, this interpolates from a table of skew normal coefficients depending on the ratio $\\sigma_{upper}/\\sigma_{lower}$, generates some samples, and renormalizes them to the requested $\\mu$, $\\sigma_{upper}$, and $\\sigma_{lower}$.</p>"},{"location":"using-skewnormal-for-asymmetric-uncertainties/#understanding-the-skew-normal","title":"Understanding the Skew Normal\u00b6","text":"<p>The skew normal depends on a location $\\mu$, a scale $\\sigma$, and an asymmetry parameter $\\alpha$, which can be positive or negative.</p>"},{"location":"using-skewnormal-for-asymmetric-uncertainties/#setting-up-interpolation-tables","title":"Setting Up Interpolation Tables\u00b6","text":"<p>Pineda et al. provide code to numerically solve for the parameters of a skew normal distribution, given a set of asymmetric error bars. Since this takes a little time and can occasionally be a little unstable, for <code>exoatlas</code> we derive a table of coefficients and interpolate from it based on how asymmetric the errors are using $\\sigma_{upper}/\\sigma_{lower}$.</p>"},{"location":"visualizing/","title":"Visualizing","text":"In\u00a0[1]: Copied! <pre>import exoatlas as ea\nimport matplotlib.pyplot as plt\nimport astropy.units as u \n\nea.version() \n</pre> import exoatlas as ea import matplotlib.pyplot as plt import astropy.units as u   ea.version()  Out[1]: <pre>'0.6.1'</pre> <p>We'll modify the default plot aspect ratio, so they don't take up too much space.</p> In\u00a0[2]: Copied! <pre>plt.rcParams['figure.figsize'] = (8,3)\n</pre> plt.rcParams['figure.figsize'] = (8,3) <p>Let's generate some populations to visualize.</p> In\u00a0[3]: Copied! <pre>exoplanets = ea.TransitingExoplanets()\nsolar = ea.SolarSystem()\n</pre> exoplanets = ea.TransitingExoplanets() solar = ea.SolarSystem() <p>It is, of course, possible to make your own plots using data from <code>exoatlas</code> populations. You probably have some brilliant idea, and just working with the raw quantities might be where you want to start. Here's a basic example.</p> In\u00a0[4]: Copied! <pre># plot the exoplanets \nx = exoplanets.relative_insolation()\ny = exoplanets.radius()\nplt.scatter(x, y, marker='.', s=5, alpha=0.5)\n\n# plot the Solar System planets \nx = solar.relative_insolation()\ny = solar.radius()\nplt.scatter(x, y, marker='s', s=30, color='black')\n\n# adjust the plotting details\nplt.xscale('log')\nplt.yscale('log')\nplt.xlabel('Bolometric Flux (relative to Earth)')\nplt.ylabel('Planet Radius (Earth radii)')\nplt.xlim(1e5, 1e-5);\n</pre> # plot the exoplanets  x = exoplanets.relative_insolation() y = exoplanets.radius() plt.scatter(x, y, marker='.', s=5, alpha=0.5)  # plot the Solar System planets  x = solar.relative_insolation() y = solar.radius() plt.scatter(x, y, marker='s', s=30, color='black')  # adjust the plotting details plt.xscale('log') plt.yscale('log') plt.xlabel('Bolometric Flux (relative to Earth)') plt.ylabel('Planet Radius (Earth radii)') plt.xlim(1e5, 1e-5); In\u00a0[5]: Copied! <pre># plot the exoplanets with uncertainties\nx = exoplanets.relative_insolation()\ny = exoplanets.radius()\nx_error = exoplanets.relative_insolation_uncertainty_lowerupper()\ny_error = exoplanets.radius_uncertainty_lowerupper()\nplt.errorbar(x, y, xerr=x_error, yerr=y_error, linewidth=0, elinewidth=1, alpha=0.5)\n\n# plot the Solar System planets \nx = solar.relative_insolation()\ny = solar.radius()\nplt.scatter(x, y, marker='s', s=30, color='black')\n\n# adjust the plotting details\nplt.xscale('log')\nplt.yscale('log')\nplt.xlabel('Bolometric Flux (relative to Earth)')\nplt.ylabel('Planet Radius (Earth radii)')\nplt.xlim(1e5, 1e-5);\n</pre> # plot the exoplanets with uncertainties x = exoplanets.relative_insolation() y = exoplanets.radius() x_error = exoplanets.relative_insolation_uncertainty_lowerupper() y_error = exoplanets.radius_uncertainty_lowerupper() plt.errorbar(x, y, xerr=x_error, yerr=y_error, linewidth=0, elinewidth=1, alpha=0.5)  # plot the Solar System planets  x = solar.relative_insolation() y = solar.radius() plt.scatter(x, y, marker='s', s=30, color='black')  # adjust the plotting details plt.xscale('log') plt.yscale('log') plt.xlabel('Bolometric Flux (relative to Earth)') plt.ylabel('Planet Radius (Earth radii)') plt.xlim(1e5, 1e-5); <p>You can build up whatever beautiful, transparent, creative, and useful visualizations you want on your own.</p> <p>However, often we may want to fill a panel with multiple different planet populations, and maybe even across multiple linked plots. That can be a little annoying to keep track of, so we tried to add a few shortcuts to make it easier to sets of quantities for groups of populations.</p> <p>These tools are all contained within the <code>exoatlas.visualizations</code> module.</p> In\u00a0[6]: Copied! <pre>import exoatlas.visualizations as vi\n</pre> import exoatlas.visualizations as vi In\u00a0[7]: Copied! <pre># specify everything \nradius = vi.Plottable(source='radius', \n                   label='Planet Radius (Earth radii)', \n                   scale='log', \n                   lim=[0.3, 30], \n                   unit=u.Rearth)\n\n# leave scale and limits as None, for auto-scaling\ndistance = vi.Plottable(source='distance', \n                     label='Distance (pc)')\n\n# define scale and limits, but don't worry about a fancy label\nteff = vi.Plottable(source='stellar_teff', scale='log', lim=[2500, 7500])\n\n# pass keyword \"wavelength\" to quantity method \nbrightness = vi.Plottable(source='stellar_brightness',\n                       scale='linear', lim=[1e3, 1e9],\n                       wavelength=1*u.micron)\n</pre> # specify everything  radius = vi.Plottable(source='radius',                     label='Planet Radius (Earth radii)',                     scale='log',                     lim=[0.3, 30],                     unit=u.Rearth)  # leave scale and limits as None, for auto-scaling distance = vi.Plottable(source='distance',                       label='Distance (pc)')  # define scale and limits, but don't worry about a fancy label teff = vi.Plottable(source='stellar_teff', scale='log', lim=[2500, 7500])  # pass keyword \"wavelength\" to quantity method  brightness = vi.Plottable(source='stellar_brightness',                        scale='linear', lim=[1e3, 1e9],                        wavelength=1*u.micron)  <p>We indicate these variable as <code>Plottable</code> by a little ruler \ud83d\udccf, indicating each is ready to draw some data at the right locations on a plot.</p> In\u00a0[8]: Copied! <pre>radius, distance, brightness, teff\n</pre> radius, distance, brightness, teff Out[8]: <pre>(\ud83d\udccf radius, \ud83d\udccf distance, \ud83d\udccf stellar_brightness, \ud83d\udccf stellar_teff)</pre> <p>For a given population, it can retrieve values and symmetric or asymmetric uncertainties.</p> In\u00a0[9]: Copied! <pre>radius.value(exoplanets)\n</pre> radius.value(exoplanets) Out[9]:  $[1.875,~3.957,~2.522,~\\dots,~23.203,~15.39,~2.11] \\; \\mathrm{R_{\\oplus}}$  In\u00a0[10]: Copied! <pre>radius.uncertainty(exoplanets)\n</pre> radius.uncertainty(exoplanets) Out[10]:  $[0.029,~0.146,~0.247,~\\dots,~2.466,~0.291,~0.05] \\; \\mathrm{R_{\\oplus}}$  In\u00a0[11]: Copied! <pre>radius.uncertainty_lowerupper(exoplanets)\n</pre> radius.uncertainty_lowerupper(exoplanets) Out[11]: <pre>(&lt;Quantity [0.029, 0.146, 0.247, ..., 2.466, 0.291, 0.05 ] earthRad&gt;,\n &lt;Quantity [0.029, 0.146, 0.247, ..., 2.466, 0.291, 0.05 ] earthRad&gt;)</pre> <p>We can also calculate normalized values, which may be useful for representing sizes or colors. The normalization will pay attention to the <code>scale</code> and <code>lim</code> keywords.</p> In\u00a0[12]: Copied! <pre>brightness.value(exoplanets)\n</pre> brightness.value(exoplanets) Out[12]:  $[3.5259359 \\times 10^{8},~1.1323201 \\times 10^{8},~1.1323201 \\times 10^{8},~\\dots, 8566721.6,~4253058.8,~3.9229703 \\times 10^{8}] \\; \\mathrm{\\frac{ph}{\\mu m\\,s\\,m^{2}}}$  In\u00a0[13]: Copied! <pre>brightness.normalized_value(exoplanets)\n</pre> brightness.normalized_value(exoplanets) Out[13]: <pre>masked_array(data = [ 0.35259294  0.11323112  0.11323112 ...,  0.00856573  0.00425206\n  0.39229643],\n             mask = False,\n       fill_value = 1e+20)</pre> <p>If we wanted to stop here, we could use these three <code>Plottable</code> objects to help create a plot. Practically, this isn't much different from just making the plot ourselves from the raw data; basically it's just the size normalization that's helping.</p> In\u00a0[14]: Copied! <pre>mass_limit =  0.5*u.Msun\nis_lowmass = exoplanets.stellar_mass() &lt; mass_limit\nhighmass = exoplanets[is_lowmass == False]\nhighmass.label = f'&gt; {mass_limit}'\nlowmass = exoplanets[is_lowmass]\nlowmass.label = f'&lt; {mass_limit}'\n\nplt.figure()\nfor pop in [highmass, lowmass]:\n    x = distance.value(pop)\n    y = radius.value(pop)\n    s = brightness.normalized_value(pop)*1000\n    plt.scatter(x, y, s=s, label=pop.label)\nplt.xscale('log')\nplt.yscale('log')\nplt.xlabel(distance.label)\nplt.ylabel(radius.label)\nplt.legend(frameon=False, loc='upper left', bbox_to_anchor=(1,1));\n</pre> mass_limit =  0.5*u.Msun is_lowmass = exoplanets.stellar_mass() &lt; mass_limit highmass = exoplanets[is_lowmass == False] highmass.label = f'&gt; {mass_limit}' lowmass = exoplanets[is_lowmass] lowmass.label = f'&lt; {mass_limit}'  plt.figure() for pop in [highmass, lowmass]:     x = distance.value(pop)     y = radius.value(pop)     s = brightness.normalized_value(pop)*1000     plt.scatter(x, y, s=s, label=pop.label) plt.xscale('log') plt.yscale('log') plt.xlabel(distance.label) plt.ylabel(radius.label) plt.legend(frameon=False, loc='upper left', bbox_to_anchor=(1,1));  <p>We provide a number of preset <code>Plottable</code> objects to use as visual components. These can be accessed directly as variables in <code>vi</code>, or as elements of the <code>vi.preset_plottables</code> dictionary.</p> In\u00a0[15]: Copied! <pre>vi.Flux()\n</pre> vi.Flux() Out[15]: <pre>\ud83d\udccf relative_insolation</pre> In\u00a0[16]: Copied! <pre>for k, v in vi.preset_plottables.items():\n    print(f'{k:&gt;30} = {v()}')\n</pre> for k, v in vi.preset_plottables.items():     print(f'{k:&gt;30} = {v()}') <pre>                          Flux = \ud83d\udccf relative_insolation\n                           Teq = \ud83d\udccf teq\n             CumulativeXUVFlux = \ud83d\udccf relative_cumulative_xuv_insolation\n                ImpactVelocity = \ud83d\udccf impact_velocity\n                        Radius = \ud83d\udccf radius\n                          Mass = \ud83d\udccf mass\n                 SemimajorAxis = \ud83d\udccf semimajoraxis\n             AngularSeparation = \ud83d\udccf angular_separation\n                      Contrast = \ud83d\udccf imaging_contrast\n                   KludgedMass = \ud83d\udccf kludge_mass\n                   StellarTeff = \ud83d\udccf stellar_teff\n             StellarLuminosity = \ud83d\udccf stellar_luminosity\n                      Distance = \ud83d\udccf distance\n                EscapeVelocity = \ud83d\udccf escape_velocity\n               EscapeParameter = \ud83d\udccf escape_parameter\n                       Density = \ud83d\udccf density\n                 StellarRadius = \ud83d\udccf stellar_radius\n                        Period = \ud83d\udccf period\n                          Gmag = \ud83d\udccf magnitude_gaia\n                         Depth = \ud83d\udccf transit_depth\n             StellarBrightness = \ud83d\udccf stellar_brightness\n    StellarBrightnessTelescope = \ud83d\udccf stellar_brightness_in_telescope_units\n                      DepthSNR = \ud83d\udccf depth_snr\n                  Transmission = \ud83d\udccf transmission_signal\n               TransmissionSNR = \ud83d\udccf transmission_snr\n                    Reflection = \ud83d\udccf reflection_signal\n                 ReflectionSNR = \ud83d\udccf reflection_snr\n                      Emission = \ud83d\udccf emission_signal\n                   EmissionSNR = \ud83d\udccf emission_snr\n                RightAscension = \ud83d\udccf ra\n                   Declination = \ud83d\udccf dec\n</pre> <p><code>BubbleMap</code> for x, y, size, color</p> <p>For basic scatter plots, we might try <code>BubbleMap</code>, where the four ways we might represent data are:</p> <ul> <li><code>xaxis</code> = bubble position along the x-axis</li> <li><code>yaxis</code> = bubble position along the y-axis</li> <li><code>size</code> = bubble area, based on <code>normalized_value</code></li> <li><code>color</code> = bubble color, based on <code>normalized_value</code>, according to a colormap</li> </ul> <p>Let's try this with a basic example. We create a <code>Map</code> (\ud83d\uddfa\ufe0f) from two <code>Plottable</code> (\ud83d\udccf) objects. We can use this <code>Map</code> to plot individual populations one-by-one with <code>plot()</code>...</p> In\u00a0[17]: Copied! <pre>bubble = vi.BubbleMap(xaxis=distance, yaxis=radius)\nbubble.plot(highmass)\nbubble.plot(lowmass)\nplt.legend();\n</pre> bubble = vi.BubbleMap(xaxis=distance, yaxis=radius) bubble.plot(highmass) bubble.plot(lowmass) plt.legend(); <p>...or use <code>build()</code> to build up the plot by looping over populations.</p> In\u00a0[18]: Copied! <pre>bubble = vi.BubbleMap(xaxis=distance, yaxis=radius)\nbubble.build([highmass, lowmass])\nplt.legend();\n</pre> bubble = vi.BubbleMap(xaxis=distance, yaxis=radius) bubble.build([highmass, lowmass]) plt.legend(); <p>Let's use one more data dimension by having the size represent the brightness of the star as seen from Earth, using color simply to represent the two different populations.</p> In\u00a0[19]: Copied! <pre>bubble = vi.BubbleMap(xaxis=distance, yaxis=radius, size=brightness, color=None)\nbubble.build([highmass, lowmass])\nplt.legend();\n</pre> bubble = vi.BubbleMap(xaxis=distance, yaxis=radius, size=brightness, color=None) bubble.build([highmass, lowmass]) plt.legend(); <p>Or, if we're focusing primarily on one <code>Population</code>, we might use color to represent another quantity. In the plot below, we can see that while stellar brightness at Earth (size) generally increases toward closer distances, stars with cooler stellar effective temperatures (color) have lower intrinsic luminosities and therefore appear less bright, even at nearby distances.</p> In\u00a0[20]: Copied! <pre>bubble = vi.BubbleMap(xaxis=distance, yaxis=radius, size=brightness, color=teff)\nbubble.plot(exoplanets)\n</pre> bubble = vi.BubbleMap(xaxis=distance, yaxis=radius, size=brightness, color=teff) bubble.plot(exoplanets)  <p><code>ErrorMap</code> for x, y with uncertainties</p> <p>Including errorbars on exoplanet population data can get tricky because planets can have wildly heteroscedastic uncertainties. If we just plot errorbars for all data points equally, our eyes are visually drawn to the largest uncertainties, while we'd like them to do the opposite: focus in on the best data! As such, in the <code>ErrorMap</code> we by default scale the intensity of errorbars to visually emphasize the points with the smallest uncertainties.</p> In\u00a0[21]: Copied! <pre>error = vi.ErrorMap(xaxis=distance, yaxis=radius)\nerror.plot(exoplanets)\n</pre> error = vi.ErrorMap(xaxis=distance, yaxis=radius) error.plot(exoplanets) <p>We provide some preset <code>Maps</code> objects to use as visual components. These can be accessed directly as variables in <code>vi</code>, or as elements of the <code>vi.preset_maps</code> dictionary. Some of these maps have extra functions defined inside of them, like for plotting habitable zones or models.</p> In\u00a0[22]: Copied! <pre>vi.Flux_x_Radius()\n</pre> vi.Flux_x_Radius() Out[22]: <pre>\ud83d\uddbc\ufe0f Flux_x_Radius\n     x = \ud83d\udccf relative_insolation\n     y = \ud83d\udccf radius</pre> In\u00a0[23]: Copied! <pre>for k, v in vi.preset_maps.items():\n    print(f'{k} =\\n{v()}')\n</pre> for k, v in vi.preset_maps.items():     print(f'{k} =\\n{v()}') <pre>Flux_x_Radius =\n\ud83d\uddbc\ufe0f Flux_x_Radius\n     x = \ud83d\udccf relative_insolation\n     y = \ud83d\udccf radius\n\nFlux_x_Teff =\n\ud83d\uddbc\ufe0f Flux_x_Teff\n     x = \ud83d\udccf relative_insolation\n     y = \ud83d\udccf stellar_teff\n\nSemimajorAxis_x_StellarLuminosity =\n\ud83d\uddbc\ufe0f SemimajorAxis_x_StellarLuminosity\n     x = \ud83d\udccf semimajoraxis\n     y = \ud83d\udccf stellar_luminosity\n\nDistance_x_Radius =\n\ud83d\uddbc\ufe0f Distance_x_Radius\n     x = \ud83d\udccf distance\n     y = \ud83d\udccf radius\n\nDistance_x_Teff =\n\ud83d\uddbc\ufe0f Distance_x_Teff\n     x = \ud83d\udccf distance\n     y = \ud83d\udccf stellar_teff\n\nEscapeParameter_x_Radius =\n\ud83d\uddbc\ufe0f EscapeParameter_x_Radius\n     x = \ud83d\udccf escape_parameter\n     y = \ud83d\udccf radius\n\nDensity_x_Radius =\n\ud83d\uddbc\ufe0f Density_x_Radius\n     x = \ud83d\udccf density\n     y = \ud83d\udccf radius\n\nStellarRadius_x_PlanetRadius =\n\ud83d\uddbc\ufe0f StellarRadius_x_PlanetRadius\n     x = \ud83d\udccf stellar_radius\n     y = \ud83d\udccf radius\n\nDepth_x_Radius =\n\ud83d\uddbc\ufe0f Depth_x_Radius\n     x = \ud83d\udccf transit_depth\n     y = \ud83d\udccf radius\n\nTransmission_x_Radius =\n\ud83d\uddbc\ufe0f Transmission_x_Radius\n     x = \ud83d\udccf transmission_signal\n     y = \ud83d\udccf radius\n\nReflection_x_Radius =\n\ud83d\uddbc\ufe0f Reflection_x_Radius\n     x = \ud83d\udccf reflection_signal\n     y = \ud83d\udccf radius\n\nEmission_x_Radius =\n\ud83d\uddbc\ufe0f Emission_x_Radius\n     x = \ud83d\udccf emission_signal\n     y = \ud83d\udccf radius\n\nDistance_x_Brightness =\n\ud83d\uddbc\ufe0f Distance_x_Brightness\n     x = \ud83d\udccf distance\n     y = \ud83d\udccf stellar_brightness_in_telescope_units\n\nDepth_x_Brightness =\n\ud83d\uddbc\ufe0f Depth_x_Brightness\n     x = \ud83d\udccf transit_depth\n     y = \ud83d\udccf stellar_brightness_in_telescope_units\n\nTransmission_x_Brightness =\n\ud83d\uddbc\ufe0f Transmission_x_Brightness\n     x = \ud83d\udccf transmission_signal\n     y = \ud83d\udccf stellar_brightness_in_telescope_units\n\nReflection_x_Brightness =\n\ud83d\uddbc\ufe0f Reflection_x_Brightness\n     x = \ud83d\udccf reflection_signal\n     y = \ud83d\udccf stellar_brightness_in_telescope_units\n\nEmission_x_Brightness =\n\ud83d\uddbc\ufe0f Emission_x_Brightness\n     x = \ud83d\udccf emission_signal\n     y = \ud83d\udccf stellar_brightness_in_telescope_units\n\nPeriod_x_Radius =\n\ud83d\uddbc\ufe0f Period_x_Radius\n     x = \ud83d\udccf period\n     y = \ud83d\udccf radius\n\nSemimajorAxis_x_Radius =\n\ud83d\uddbc\ufe0f SemimajorAxis_x_Radius\n     x = \ud83d\udccf semimajoraxis\n     y = \ud83d\udccf radius\n\nSemimajorAxis_x_Mass =\n\ud83d\uddbc\ufe0f SemimajorAxis_x_Mass\n     x = \ud83d\udccf semimajoraxis\n     y = \ud83d\udccf kludge_mass\n\nMass_x_Radius =\n\ud83d\uddbc\ufe0f Mass_x_Radius\n     x = \ud83d\udccf mass\n     y = \ud83d\udccf radius\n\nMass_x_EscapeVelocity =\n\ud83d\uddbc\ufe0f Mass_x_EscapeVelocity\n     x = \ud83d\udccf mass\n     y = \ud83d\udccf escape_velocity\n\nFlux_x_EscapeVelocity =\n\ud83d\uddbc\ufe0f Flux_x_EscapeVelocity\n     x = \ud83d\udccf relative_insolation\n     y = \ud83d\udccf escape_velocity\n\nEscapeVelocity_x_Flux =\n\ud83d\uddbc\ufe0f EscapeVelocity_x_Flux\n     x = \ud83d\udccf escape_velocity\n     y = \ud83d\udccf relative_insolation\n\nEscapeVelocity_x_CumulativeXUVFlux =\n\ud83d\uddbc\ufe0f EscapeVelocity_x_CumulativeXUVFlux\n     x = \ud83d\udccf escape_velocity\n     y = \ud83d\udccf relative_cumulative_xuv_insolation\n\nCumulativeXUVFlux_x_EscapeVelocity =\n\ud83d\uddbc\ufe0f CumulativeXUVFlux_x_EscapeVelocity\n     x = \ud83d\udccf relative_cumulative_xuv_insolation\n     y = \ud83d\udccf escape_velocity\n\nImpactVelocity_x_EscapeVelocity =\n\ud83d\uddbc\ufe0f ImpactVelocity_x_EscapeVelocity\n     x = \ud83d\udccf impact_velocity\n     y = \ud83d\udccf escape_velocity\n\nRA_x_Dec =\n\ud83d\uddbc\ufe0f RA_x_Dec\n     x = \ud83d\udccf ra\n     y = \ud83d\udccf dec\n\n</pre> In\u00a0[24]: Copied! <pre>neat_planet = exoplanets['HD209458b']\nneat_planet.color='magenta'\nneat_planet.s=400\nneat_planet.zorder=1e20\nneat_planet.alpha=1\nneat_planet.bubble_anyway=True\nneat_planet.outlined=True \nneat_planet.filled=False\n</pre> neat_planet = exoplanets['HD209458b'] neat_planet.color='magenta' neat_planet.s=400 neat_planet.zorder=1e20 neat_planet.alpha=1 neat_planet.bubble_anyway=True neat_planet.outlined=True  neat_planet.filled=False  <p>Let's start by creating a <code>Gallery</code> from a list of <code>Map</code> objects, which will then be organized and built into a multipanel plot. For example, let's try to make an approximate version of a \"cosmic shoreline\" plot, including a few extra Solar System populations.</p> In\u00a0[25]: Copied! <pre>dwarfs = ea.SolarSystemDwarfPlanets()\nmoons = ea.SolarSystemMoons()\n</pre> dwarfs = ea.SolarSystemDwarfPlanets() moons = ea.SolarSystemMoons() In\u00a0[26]: Copied! <pre># create the column of panels \nshorelines = vi.Gallery(maps=[vi.EscapeVelocity_x_Flux(), vi.EscapeVelocity_x_CumulativeXUVFlux()], \n                        horizontal=False, \n                        figsize=(6, 8)) \n# populate the plots with data\nshorelines.build([solar, dwarfs, moons, exoplanets, neat_planet])\n\n# add some curves and make some adjustments to the maps\nfor p in shorelines.maps.values():\n    plt.sca(p.ax)\n    p.plot_shoreline()\n    p.plot_jeans_shoreline()\n    plt.ylim(1e-4, 1e4)\n    plt.xlim(0.1, 1000)\np.add_legend(fontsize=7)\n</pre> # create the column of panels  shorelines = vi.Gallery(maps=[vi.EscapeVelocity_x_Flux(), vi.EscapeVelocity_x_CumulativeXUVFlux()],                          horizontal=False,                          figsize=(6, 8))  # populate the plots with data shorelines.build([solar, dwarfs, moons, exoplanets, neat_planet])  # add some curves and make some adjustments to the maps for p in shorelines.maps.values():     plt.sca(p.ax)     p.plot_shoreline()     p.plot_jeans_shoreline()     plt.ylim(1e-4, 1e4)     plt.xlim(0.1, 1000) p.add_legend(fontsize=7)  <p>Next, let's try <code>TransitGallery</code>, a preset <code>Gallery</code> that works well for transiting exoplanet populations.</p> In\u00a0[27]: Copied! <pre>row = vi.FourPanelTransitGallery() \nrow.build([exoplanets, solar, neat_planet])\nrow.maps['mass_x_radius'].add_legend()\n</pre> row = vi.FourPanelTransitGallery()  row.build([exoplanets, solar, neat_planet]) row.maps['mass_x_radius'].add_legend() <p>The definition of <code>TransitGallery</code> effectively just chooses a few default <code>Map</code> objects to include. Let's make a similar one on our own, with just the first two panels, to see how that'd work.</p> In\u00a0[28]: Copied! <pre>row = vi.Gallery(maps=[vi.Mass_x_Radius(), vi.Flux_x_Radius()]) \nrow.build([exoplanets, solar, neat_planet])\nrow.maps['mass_x_radius'].add_legend()\n\n            \n</pre> row = vi.Gallery(maps=[vi.Mass_x_Radius(), vi.Flux_x_Radius()])  row.build([exoplanets, solar, neat_planet]) row.maps['mass_x_radius'].add_legend()               <p>The <code>GridGallery</code> can be used to specify a grid of maps with shared x and y axes, starting from the <code>Plottable</code> quantities you want along each row and column.</p> In\u00a0[29]: Copied! <pre>k = ea.Kepler()\nt = ea.TESS() \no = ea.TransitingExoplanets() - k - t\no.label = 'Other'\ngrid = vi.GridGallery(rows=[vi.Declination, vi.Radius], cols=[vi.RightAscension, vi.Flux])\ngrid.build([o, k, t])\ngrid.maps['relative_insolation_x_dec'].add_legend()\n</pre> k = ea.Kepler() t = ea.TESS()  o = ea.TransitingExoplanets() - k - t o.label = 'Other' grid = vi.GridGallery(rows=[vi.Declination, vi.Radius], cols=[vi.RightAscension, vi.Flux]) grid.build([o, k, t]) grid.maps['relative_insolation_x_dec'].add_legend() <p>Arbitrarily complicated custom <code>Gallery</code> definitions can be created by overwriting the <code>.setup_maps</code> and <code>.refine_maps</code> methods. That's how <code>PlanetGallery</code> and <code>EverythingGallery</code> were made!</p> In\u00a0[30]: Copied! <pre>vi.PlanetGallery().build([solar, exoplanets, neat_planet])\n</pre> vi.PlanetGallery().build([solar, exoplanets, neat_planet]) In\u00a0[31]: Copied! <pre>all_planets = ea.get_all_planets()\nall_planets['neat'] = neat_planet\nvi.EverythingGallery().build(all_planets)\n</pre> all_planets = ea.get_all_planets() all_planets['neat'] = neat_planet vi.EverythingGallery().build(all_planets) <p>These examples are not entirely exhaustive, but hopefully they give you a little taste of what might be possible using <code>exoatlas</code> for visualizations!</p>"},{"location":"visualizing/#visualizing","title":"Visualizing\u00b6","text":"<p>We often want to visualize one or more exoplanet populations in fairly standard ways. Here we summarize some predefined visualizations for populations and explain how you can create your own multi-panel, multi-population visualizations with <code>exoatlas</code>.</p>"},{"location":"visualizing/#make-your-own-plots-with-exoatlas-data","title":"Make Your Own Plots with <code>exoatlas</code> Data\u00b6","text":""},{"location":"visualizing/#plottable-objects-prepare-data-for-visualization","title":"\ud83d\udccf Plottable \ud83d\udccf objects prepare data for visualization\u00b6","text":"<p>To get data ready for visualizing, a <code>Plottable</code> will generally define some of the following:</p> <ul> <li><code>source</code> = where does the quantity come from? This should be the name of a method that's available for all the populations you might want to use.</li> <li><code>label</code> = a human-friendly label. This may appear as axis labels or in figure legends.</li> <li><code>scale</code> = are the data better displayed linearly or logarithmically? This will set the scale for x or y axes, or how colors or sizes are normalized.</li> <li><code>lim</code> = what are reasonable limits? This would set default axis limits, or how colors and sizes are define their minimum and maximum values.</li> <li><code>**kw</code> = if <code>source</code> is a method that takes keyword arguments (such as <code>teq(albedo=..., f=...)</code>), any additional keywords you provide when creating a <code>Plottable</code> will get passed along to the method</li> </ul> <p>Let's create a few:</p>"},{"location":"visualizing/#map-objects-draw-plots-with-plottables","title":"\ud83d\uddfa\ufe0f Map \ud83d\uddfa\ufe0f objects draw plots with plottables\u00b6","text":"<p>With a <code>Map</code>, we can combine a few <code>Plottable</code> objects together to build up a plot. The <code>Map</code> is responsible for:</p> <ul> <li>managing the figure and axes where data will be drawn</li> <li>looping over populations and representing them</li> <li>serving as a building block for multi-panel linked visualizations</li> </ul> <p>The two main maps we use are <code>BubbleMap</code> for scatter plots and <code>ErrorMap</code> for including error bars.</p>"},{"location":"visualizing/#gallery-objects-collects-maps-together","title":"\ud83d\uddbc\ufe0f Gallery \ud83d\uddbc\ufe0f objects collects maps together\u00b6","text":"<p>Often, we may want to look at multple plots side-by-side, to see how trends in one view might relate to other properties. A <code>Gallery</code> can be built up from a collection of <code>Map</code> objects, like this. Let's add one more planet population for comparison, and then look at a few examples.</p>"}]}